
TEST4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ea0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00002ea0  00002f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080016a  0080016a  0000303e  2**0
                  ALLOC
  3 .stab         00002bf8  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b0  00000000  00000000  00005c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000727a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000aa0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bbe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__vector_1>
       8:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__vector_2>
       c:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 15 	call	0x2a28	; 0x2a28 <main>
      8a:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_Init>:
#include"BIT_MATH.h"
#include"ADC_Private.h"
#include"ADC_Config.h"

void ADC_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*1- Select Reference Voltage*/
#if SET_ADC_REF_VOLT==ADC_AVCC_REF_VOLT
	SET_BIT(ADMUX,6);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
#endif
	/*2- Select Right or left Adjsut*/
#if SET_ADC_LEFT_ADJUST==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif SET_ADC_LEFT_ADJUST==ADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
#else
#error "ADC LEFT Adjust option is not valid"
#endif
	/*Select Prescaler */
	ADCSRA&=0xF8;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA|=SET_ADC_PRESCALER;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 60       	ori	r24, 0x07	; 7
     e7a:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA,7);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_StartConversion>:

void ADC_StartConversion(u8 Copy_u8Channel)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	/*Select the Suitable Channel*/
	ADMUX&=0xE0;
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	90 81       	ld	r25, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,6);
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24
	/*Wait to complete conversion*/
	while(GET_BIT(ADCSRA,4)==0);
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	a9 f3       	breq	.-22     	; 0xec8 <ADC_StartConversion+0x38>
}
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <ADC_ReadADCValue>:

u16 ADC_ReadADCValue(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	return ADC;
     eee:	e4 e2       	ldi	r30, 0x24	; 36
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <ADC_AnalogValue>:

u16 ADC_AnalogValue(u16 Copy_DigitalValue)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <ADC_AnalogValue+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <ADC_AnalogValue+0x8>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	9c 83       	std	Y+4, r25	; 0x04
     f0a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16AnalogValue;
	Local_u16AnalogValue=(Copy_DigitalValue*SET_ADC_REF_VOLT)/1023;
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	cc 01       	movw	r24, r24
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	28 e8       	ldi	r18, 0x88	; 136
     f18:	33 e1       	ldi	r19, 0x13	; 19
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__mulsi3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	2f ef       	ldi	r18, 0xFF	; 255
     f2c:	33 e0       	ldi	r19, 0x03	; 3
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 f5 16 	call	0x2dea	; 0x2dea <__udivmodsi4>
     f3a:	da 01       	movw	r26, r20
     f3c:	c9 01       	movw	r24, r18
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16AnalogValue;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <DIO_SetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"
/*Set Pin Direction */
void DIO_SetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <DIO_SetPinDirection+0x6>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <DIO_SetPinDirection+0x8>
     f5c:	0f 92       	push	r0
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	6a 83       	std	Y+2, r22	; 0x02
     f66:	4b 83       	std	Y+3, r20	; 0x03
	/*Check on Port ID*/
	switch(Copy_u8PortID)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	2c 83       	std	Y+4, r18	; 0x04
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <DIO_SetPinDirection+0x2a>
     f7c:	47 c0       	rjmp	.+142    	; 0x100c <DIO_SetPinDirection+0xb8>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <DIO_SetPinDirection+0x3e>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	71 f0       	breq	.+28     	; 0xfac <DIO_SetPinDirection+0x58>
     f90:	cb c0       	rjmp	.+406    	; 0x1128 <DIO_SetPinDirection+0x1d4>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO_SetPinDirection+0x4a>
     f9c:	67 c0       	rjmp	.+206    	; 0x106c <DIO_SetPinDirection+0x118>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_SetPinDirection+0x56>
     fa8:	91 c0       	rjmp	.+290    	; 0x10cc <DIO_SetPinDirection+0x178>
     faa:	be c0       	rjmp	.+380    	; 0x1128 <DIO_SetPinDirection+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinDirection==PIN_OUTPUT)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <DIO_SetPinDirection+0x86>
		{
			SET_BIT(DDRA,Copy_u8PinNumber);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_SetPinDirection+0x7c>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_SetPinDirection+0x78>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	a7 c0       	rjmp	.+334    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection==PIN_INPUT)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <DIO_SetPinDirection+0x8e>
     fe0:	a3 c0       	rjmp	.+326    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		{
			CLR_BIT(DDRA,Copy_u8PinNumber);
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_SetPinDirection+0xac>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_SetPinDirection+0xa8>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	8e c0       	rjmp	.+284    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinDirection==PIN_OUTPUT)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	a1 f4       	brne	.+40     	; 0x103a <DIO_SetPinDirection+0xe6>
		{
			SET_BIT(DDRB,Copy_u8PinNumber);
    1012:	a7 e3       	ldi	r26, 0x37	; 55
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_SetPinDirection+0xdc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_SetPinDirection+0xd8>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	77 c0       	rjmp	.+238    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection==PIN_INPUT)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <DIO_SetPinDirection+0xee>
    1040:	73 c0       	rjmp	.+230    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		{
			CLR_BIT(DDRB,Copy_u8PinNumber);
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_SetPinDirection+0x10c>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_SetPinDirection+0x108>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	5e c0       	rjmp	.+188    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinDirection==PIN_OUTPUT)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <DIO_SetPinDirection+0x146>
		{
			SET_BIT(DDRC,Copy_u8PinNumber);
    1072:	a4 e3       	ldi	r26, 0x34	; 52
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e4 e3       	ldi	r30, 0x34	; 52
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_SetPinDirection+0x13c>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_SetPinDirection+0x138>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	47 c0       	rjmp	.+142    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection==PIN_INPUT)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 23       	and	r24, r24
    109e:	09 f0       	breq	.+2      	; 0x10a2 <DIO_SetPinDirection+0x14e>
    10a0:	43 c0       	rjmp	.+134    	; 0x1128 <DIO_SetPinDirection+0x1d4>
		{
			CLR_BIT(DDRC,Copy_u8PinNumber);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_SetPinDirection+0x16c>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_SetPinDirection+0x168>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	2e c0       	rjmp	.+92     	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinDirection==PIN_OUTPUT)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <DIO_SetPinDirection+0x1a6>
		{
			SET_BIT(DDRD,Copy_u8PinNumber);
    10d2:	a1 e3       	ldi	r26, 0x31	; 49
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e1 e3       	ldi	r30, 0x31	; 49
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_SetPinDirection+0x19c>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_SetPinDirection+0x198>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	17 c0       	rjmp	.+46     	; 0x1128 <DIO_SetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection==PIN_INPUT)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 23       	and	r24, r24
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <DIO_SetPinDirection+0x1d4>
		{
			CLR_BIT(DDRD,Copy_u8PinNumber);
    1100:	a1 e3       	ldi	r26, 0x31	; 49
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_SetPinDirection+0x1ca>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_SetPinDirection+0x1c6>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
		}
		break;
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_SetPinValue>:
/*Set Pin Value*/
void DIO_SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_SetPinValue+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_SetPinValue+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortID)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3d 83       	std	Y+5, r19	; 0x05
    1154:	2c 83       	std	Y+4, r18	; 0x04
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <DIO_SetPinValue+0x2a>
    1160:	47 c0       	rjmp	.+142    	; 0x11f0 <DIO_SetPinValue+0xb8>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_SetPinValue+0x3e>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	71 f0       	breq	.+28     	; 0x1190 <DIO_SetPinValue+0x58>
    1174:	cb c0       	rjmp	.+406    	; 0x130c <DIO_SetPinValue+0x1d4>
    1176:	2c 81       	ldd	r18, Y+4	; 0x04
    1178:	3d 81       	ldd	r19, Y+5	; 0x05
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_SetPinValue+0x4a>
    1180:	67 c0       	rjmp	.+206    	; 0x1250 <DIO_SetPinValue+0x118>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <DIO_SetPinValue+0x56>
    118c:	91 c0       	rjmp	.+290    	; 0x12b0 <DIO_SetPinValue+0x178>
    118e:	be c0       	rjmp	.+380    	; 0x130c <DIO_SetPinValue+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinValue==PIN_HIGH)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	a1 f4       	brne	.+40     	; 0x11be <DIO_SetPinValue+0x86>
		{
			SET_BIT(PORTA,Copy_u8PinNumber);
    1196:	ab e3       	ldi	r26, 0x3B	; 59
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e3       	ldi	r30, 0x3B	; 59
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_SetPinValue+0x7c>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_SetPinValue+0x78>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	a7 c0       	rjmp	.+334    	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue==PIN_LOW)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 23       	and	r24, r24
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <DIO_SetPinValue+0x8e>
    11c4:	a3 c0       	rjmp	.+326    	; 0x130c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA,Copy_u8PinNumber);
    11c6:	ab e3       	ldi	r26, 0x3B	; 59
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	eb e3       	ldi	r30, 0x3B	; 59
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_SetPinValue+0xac>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_SetPinValue+0xa8>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	8e c0       	rjmp	.+284    	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinValue==PIN_HIGH)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <DIO_SetPinValue+0xe6>
		{
			SET_BIT(PORTB,Copy_u8PinNumber);
    11f6:	a8 e3       	ldi	r26, 0x38	; 56
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e8 e3       	ldi	r30, 0x38	; 56
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_SetPinValue+0xdc>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_SetPinValue+0xd8>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	77 c0       	rjmp	.+238    	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue==PIN_LOW)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 23       	and	r24, r24
    1222:	09 f0       	breq	.+2      	; 0x1226 <DIO_SetPinValue+0xee>
    1224:	73 c0       	rjmp	.+230    	; 0x130c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB,Copy_u8PinNumber);
    1226:	a8 e3       	ldi	r26, 0x38	; 56
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_SetPinValue+0x10c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_SetPinValue+0x108>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	5e c0       	rjmp	.+188    	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinValue==PIN_HIGH)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	a1 f4       	brne	.+40     	; 0x127e <DIO_SetPinValue+0x146>
		{
			SET_BIT(PORTC,Copy_u8PinNumber);
    1256:	a5 e3       	ldi	r26, 0x35	; 53
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_SetPinValue+0x13c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_SetPinValue+0x138>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	47 c0       	rjmp	.+142    	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue==PIN_LOW)
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 23       	and	r24, r24
    1282:	09 f0       	breq	.+2      	; 0x1286 <DIO_SetPinValue+0x14e>
    1284:	43 c0       	rjmp	.+134    	; 0x130c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC,Copy_u8PinNumber);
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_SetPinValue+0x16c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_SetPinValue+0x168>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	2e c0       	rjmp	.+92     	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinValue==PIN_HIGH)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	a1 f4       	brne	.+40     	; 0x12de <DIO_SetPinValue+0x1a6>
		{
			SET_BIT(PORTD,Copy_u8PinNumber);
    12b6:	a2 e3       	ldi	r26, 0x32	; 50
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_SetPinValue+0x19c>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_SetPinValue+0x198>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	17 c0       	rjmp	.+46     	; 0x130c <DIO_SetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue==PIN_LOW)
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 23       	and	r24, r24
    12e2:	a1 f4       	brne	.+40     	; 0x130c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD,Copy_u8PinNumber);
    12e4:	a2 e3       	ldi	r26, 0x32	; 50
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e2 e3       	ldi	r30, 0x32	; 50
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_SetPinValue+0x1ca>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_SetPinValue+0x1c6>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
		}
		break;
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_GetPinValue>:
/*Read Pin Value*/
u8 DIO_GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinNumber)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_GetPinValue+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_GetPinValue+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8PinState=0;
    132e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortID)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3d 83       	std	Y+5, r19	; 0x05
    1338:	2c 83       	std	Y+4, r18	; 0x04
    133a:	4c 81       	ldd	r20, Y+4	; 0x04
    133c:	5d 81       	ldd	r21, Y+5	; 0x05
    133e:	41 30       	cpi	r20, 0x01	; 1
    1340:	51 05       	cpc	r21, r1
    1342:	41 f1       	breq	.+80     	; 0x1394 <DIO_GetPinValue+0x78>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	91 05       	cpc	r25, r1
    134c:	34 f4       	brge	.+12     	; 0x135a <DIO_GetPinValue+0x3e>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	21 15       	cp	r18, r1
    1354:	31 05       	cpc	r19, r1
    1356:	61 f0       	breq	.+24     	; 0x1370 <DIO_GetPinValue+0x54>
    1358:	52 c0       	rjmp	.+164    	; 0x13fe <DIO_GetPinValue+0xe2>
    135a:	4c 81       	ldd	r20, Y+4	; 0x04
    135c:	5d 81       	ldd	r21, Y+5	; 0x05
    135e:	42 30       	cpi	r20, 0x02	; 2
    1360:	51 05       	cpc	r21, r1
    1362:	51 f1       	breq	.+84     	; 0x13b8 <DIO_GetPinValue+0x9c>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	b9 f1       	breq	.+110    	; 0x13dc <DIO_GetPinValue+0xc0>
    136e:	47 c0       	rjmp	.+142    	; 0x13fe <DIO_GetPinValue+0xe2>
	{
	case DIO_PORTA:
		LOC_u8PinState=GET_BIT(PINA,Copy_u8PinNumber);
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_GetPinValue+0x6c>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_GetPinValue+0x68>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	35 c0       	rjmp	.+106    	; 0x13fe <DIO_GetPinValue+0xe2>
		break;
	case DIO_PORTB:
		LOC_u8PinState=GET_BIT(PINB,Copy_u8PinNumber);
    1394:	e6 e3       	ldi	r30, 0x36	; 54
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_GetPinValue+0x90>
    13a8:	55 95       	asr	r21
    13aa:	47 95       	ror	r20
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_GetPinValue+0x8c>
    13b0:	ca 01       	movw	r24, r20
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	23 c0       	rjmp	.+70     	; 0x13fe <DIO_GetPinValue+0xe2>
		break;
	case DIO_PORTC:
		LOC_u8PinState=GET_BIT(PINC,Copy_u8PinNumber);
    13b8:	e3 e3       	ldi	r30, 0x33	; 51
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_GetPinValue+0xb4>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_GetPinValue+0xb0>
    13d4:	ca 01       	movw	r24, r20
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <DIO_GetPinValue+0xe2>
		break;
	case DIO_PORTD:
		LOC_u8PinState=GET_BIT(PIND,Copy_u8PinNumber);
    13dc:	e0 e3       	ldi	r30, 0x30	; 48
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_GetPinValue+0xd8>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_GetPinValue+0xd4>
    13f8:	ca 01       	movw	r24, r20
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8PinState;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <DIO_SetPortDirection>:
void DIO_SetPortDirection(u8 Copy_u8PortID,u8 Copy_u8PortDirection)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <DIO_SetPortDirection+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <DIO_SetPortDirection+0x8>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3c 83       	std	Y+4, r19	; 0x04
    1428:	2b 83       	std	Y+3, r18	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	d1 f0       	breq	.+52     	; 0x1468 <DIO_SetPortDirection+0x58>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	2c f4       	brge	.+10     	; 0x1448 <DIO_SetPortDirection+0x38>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 f0       	breq	.+24     	; 0x145e <DIO_SetPortDirection+0x4e>
    1446:	1e c0       	rjmp	.+60     	; 0x1484 <DIO_SetPortDirection+0x74>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <DIO_SetPortDirection+0x62>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <DIO_SetPortDirection+0x6c>
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <DIO_SetPortDirection+0x74>
	{
	case DIO_PORTA:
		DDRA=Copy_u8PortDirection;
    145e:	ea e3       	ldi	r30, 0x3A	; 58
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <DIO_SetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB=Copy_u8PortDirection;
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <DIO_SetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC=Copy_u8PortDirection;
    1472:	e4 e3       	ldi	r30, 0x34	; 52
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <DIO_SetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD=Copy_u8PortDirection;
    147c:	e1 e3       	ldi	r30, 0x31	; 49
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
		break;
	}
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <DIO_SetPortValue>:
void DIO_SetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortValue)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_SetPortValue+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <DIO_SetPortValue+0x8>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3c 83       	std	Y+4, r19	; 0x04
    14aa:	2b 83       	std	Y+3, r18	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	d1 f0       	breq	.+52     	; 0x14ea <DIO_SetPortValue+0x58>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <DIO_SetPortValue+0x38>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <DIO_SetPortValue+0x4e>
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <DIO_SetPortValue+0x74>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <DIO_SetPortValue+0x62>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <DIO_SetPortValue+0x6c>
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <DIO_SetPortValue+0x74>
		{
		case DIO_PORTA:
			PORTA=Copy_u8PortValue;
    14e0:	eb e3       	ldi	r30, 0x3B	; 59
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <DIO_SetPortValue+0x74>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8PortValue;
    14ea:	e8 e3       	ldi	r30, 0x38	; 56
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	80 83       	st	Z, r24
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <DIO_SetPortValue+0x74>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8PortValue;
    14f4:	e5 e3       	ldi	r30, 0x35	; 53
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <DIO_SetPortValue+0x74>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8PortValue;
    14fe:	e2 e3       	ldi	r30, 0x32	; 50
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 83       	st	Z, r24
			break;
		}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <DIO_Set_4MSBDirection>:
void DIO_Set_4MSBDirection(u8 Copy_u8PortID,u8 Copy_u8PinsDirection)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <DIO_Set_4MSBDirection+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <DIO_Set_4MSBDirection+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3c 83       	std	Y+4, r19	; 0x04
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	79 f1       	breq	.+94     	; 0x1596 <DIO_Set_4MSBDirection+0x82>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_Set_4MSBDirection+0x38>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f0       	breq	.+26     	; 0x1564 <DIO_Set_4MSBDirection+0x50>
    154a:	6f c0       	rjmp	.+222    	; 0x162a <DIO_Set_4MSBDirection+0x116>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	c9 f1       	breq	.+114    	; 0x15c8 <DIO_Set_4MSBDirection+0xb4>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_Set_4MSBDirection+0x4e>
    1560:	4c c0       	rjmp	.+152    	; 0x15fa <DIO_Set_4MSBDirection+0xe6>
    1562:	63 c0       	rjmp	.+198    	; 0x162a <DIO_Set_4MSBDirection+0x116>
	{
	case DIO_PORTA:
		DDRA&=0x0F;
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8f 70       	andi	r24, 0x0F	; 15
    1570:	8c 93       	st	X, r24
		DDRA|=Copy_u8PinsDirection<<4;
    1572:	aa e3       	ldi	r26, 0x3A	; 58
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ea e3       	ldi	r30, 0x3A	; 58
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	82 95       	swap	r24
    1586:	92 95       	swap	r25
    1588:	90 7f       	andi	r25, 0xF0	; 240
    158a:	98 27       	eor	r25, r24
    158c:	80 7f       	andi	r24, 0xF0	; 240
    158e:	98 27       	eor	r25, r24
    1590:	82 2b       	or	r24, r18
    1592:	8c 93       	st	X, r24
    1594:	4a c0       	rjmp	.+148    	; 0x162a <DIO_Set_4MSBDirection+0x116>
		break;
	case DIO_PORTB:
		DDRB&=0x0F;
    1596:	a7 e3       	ldi	r26, 0x37	; 55
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e7 e3       	ldi	r30, 0x37	; 55
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 70       	andi	r24, 0x0F	; 15
    15a2:	8c 93       	st	X, r24
		DDRB|=Copy_u8PinsDirection<<4;
    15a4:	a7 e3       	ldi	r26, 0x37	; 55
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	28 2f       	mov	r18, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	82 95       	swap	r24
    15b8:	92 95       	swap	r25
    15ba:	90 7f       	andi	r25, 0xF0	; 240
    15bc:	98 27       	eor	r25, r24
    15be:	80 7f       	andi	r24, 0xF0	; 240
    15c0:	98 27       	eor	r25, r24
    15c2:	82 2b       	or	r24, r18
    15c4:	8c 93       	st	X, r24
    15c6:	31 c0       	rjmp	.+98     	; 0x162a <DIO_Set_4MSBDirection+0x116>
		break;
	case DIO_PORTC:
		DDRC&=0x0F;
    15c8:	a4 e3       	ldi	r26, 0x34	; 52
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e4 e3       	ldi	r30, 0x34	; 52
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 70       	andi	r24, 0x0F	; 15
    15d4:	8c 93       	st	X, r24
		DDRC|=Copy_u8PinsDirection<<4;
    15d6:	a4 e3       	ldi	r26, 0x34	; 52
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e4 e3       	ldi	r30, 0x34	; 52
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	82 95       	swap	r24
    15ea:	92 95       	swap	r25
    15ec:	90 7f       	andi	r25, 0xF0	; 240
    15ee:	98 27       	eor	r25, r24
    15f0:	80 7f       	andi	r24, 0xF0	; 240
    15f2:	98 27       	eor	r25, r24
    15f4:	82 2b       	or	r24, r18
    15f6:	8c 93       	st	X, r24
    15f8:	18 c0       	rjmp	.+48     	; 0x162a <DIO_Set_4MSBDirection+0x116>
		break;
	case DIO_PORTD:
		DDRD&=0x0F;
    15fa:	a1 e3       	ldi	r26, 0x31	; 49
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e1 e3       	ldi	r30, 0x31	; 49
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	8c 93       	st	X, r24
		DDRD|=Copy_u8PinsDirection<<4;
    1608:	a1 e3       	ldi	r26, 0x31	; 49
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e1 e3       	ldi	r30, 0x31	; 49
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	82 95       	swap	r24
    161c:	92 95       	swap	r25
    161e:	90 7f       	andi	r25, 0xF0	; 240
    1620:	98 27       	eor	r25, r24
    1622:	80 7f       	andi	r24, 0xF0	; 240
    1624:	98 27       	eor	r25, r24
    1626:	82 2b       	or	r24, r18
    1628:	8c 93       	st	X, r24
		break;
	}
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_Set_4LSBDirection>:
void DIO_Set_4LSBDirection(u8 Copy_u8PortID,u8 Copy_u8PinsDirection)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_Set_4LSBDirection+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_Set_4LSBDirection+0x8>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3c 83       	std	Y+4, r19	; 0x04
    1650:	2b 83       	std	Y+3, r18	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	29 f1       	breq	.+74     	; 0x16a6 <DIO_Set_4LSBDirection+0x6e>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <DIO_Set_4LSBDirection+0x38>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	61 f0       	breq	.+24     	; 0x1686 <DIO_Set_4LSBDirection+0x4e>
    166e:	4a c0       	rjmp	.+148    	; 0x1704 <DIO_Set_4LSBDirection+0xcc>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	31 f1       	breq	.+76     	; 0x16c6 <DIO_Set_4LSBDirection+0x8e>
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	89 f1       	breq	.+98     	; 0x16e6 <DIO_Set_4LSBDirection+0xae>
    1684:	3f c0       	rjmp	.+126    	; 0x1704 <DIO_Set_4LSBDirection+0xcc>
	{
	case DIO_PORTA:
		DDRA&=0xF0;
    1686:	aa e3       	ldi	r26, 0x3A	; 58
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ea e3       	ldi	r30, 0x3A	; 58
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 7f       	andi	r24, 0xF0	; 240
    1692:	8c 93       	st	X, r24
		DDRA|=Copy_u8PinsDirection;
    1694:	aa e3       	ldi	r26, 0x3A	; 58
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	90 81       	ld	r25, Z
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	89 2b       	or	r24, r25
    16a2:	8c 93       	st	X, r24
    16a4:	2f c0       	rjmp	.+94     	; 0x1704 <DIO_Set_4LSBDirection+0xcc>
		break;
	case DIO_PORTB:
		DDRB&=0xF0;
    16a6:	a7 e3       	ldi	r26, 0x37	; 55
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e7 e3       	ldi	r30, 0x37	; 55
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 7f       	andi	r24, 0xF0	; 240
    16b2:	8c 93       	st	X, r24
		DDRB|=Copy_u8PinsDirection;
    16b4:	a7 e3       	ldi	r26, 0x37	; 55
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e7 e3       	ldi	r30, 0x37	; 55
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	89 2b       	or	r24, r25
    16c2:	8c 93       	st	X, r24
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <DIO_Set_4LSBDirection+0xcc>
		break;
	case DIO_PORTC:
		DDRC&=0xF0;
    16c6:	a4 e3       	ldi	r26, 0x34	; 52
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e4 e3       	ldi	r30, 0x34	; 52
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 7f       	andi	r24, 0xF0	; 240
    16d2:	8c 93       	st	X, r24
		DDRC|=Copy_u8PinsDirection;
    16d4:	a4 e3       	ldi	r26, 0x34	; 52
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e4 e3       	ldi	r30, 0x34	; 52
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	90 81       	ld	r25, Z
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	89 2b       	or	r24, r25
    16e2:	8c 93       	st	X, r24
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <DIO_Set_4LSBDirection+0xcc>
		break;
	case DIO_PORTD:
		DDRD&=0xF0;
    16e6:	a1 e3       	ldi	r26, 0x31	; 49
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e1 e3       	ldi	r30, 0x31	; 49
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 7f       	andi	r24, 0xF0	; 240
    16f2:	8c 93       	st	X, r24
		DDRD|=Copy_u8PinsDirection;
    16f4:	a1 e3       	ldi	r26, 0x31	; 49
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e1 e3       	ldi	r30, 0x31	; 49
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	90 81       	ld	r25, Z
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	89 2b       	or	r24, r25
    1702:	8c 93       	st	X, r24
		break;
	}
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <DIO_Set_4MSBValue>:
void DIO_Set_4MSBValue(u8 Copy_u8PortID,u8 Copy_u8PinsValue)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <DIO_Set_4MSBValue+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_Set_4MSBValue+0x8>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3c 83       	std	Y+4, r19	; 0x04
    172a:	2b 83       	std	Y+3, r18	; 0x03
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	79 f1       	breq	.+94     	; 0x1794 <DIO_Set_4MSBValue+0x82>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <DIO_Set_4MSBValue+0x38>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f0       	breq	.+26     	; 0x1762 <DIO_Set_4MSBValue+0x50>
    1748:	6f c0       	rjmp	.+222    	; 0x1828 <DIO_Set_4MSBValue+0x116>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	c9 f1       	breq	.+114    	; 0x17c6 <DIO_Set_4MSBValue+0xb4>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <DIO_Set_4MSBValue+0x4e>
    175e:	4c c0       	rjmp	.+152    	; 0x17f8 <DIO_Set_4MSBValue+0xe6>
    1760:	63 c0       	rjmp	.+198    	; 0x1828 <DIO_Set_4MSBValue+0x116>
	{
	case DIO_PORTA:
		PORTA&=0x0F;
    1762:	ab e3       	ldi	r26, 0x3B	; 59
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 70       	andi	r24, 0x0F	; 15
    176e:	8c 93       	st	X, r24
		PORTA|=Copy_u8PinsValue<<4;
    1770:	ab e3       	ldi	r26, 0x3B	; 59
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	82 95       	swap	r24
    1784:	92 95       	swap	r25
    1786:	90 7f       	andi	r25, 0xF0	; 240
    1788:	98 27       	eor	r25, r24
    178a:	80 7f       	andi	r24, 0xF0	; 240
    178c:	98 27       	eor	r25, r24
    178e:	82 2b       	or	r24, r18
    1790:	8c 93       	st	X, r24
    1792:	4a c0       	rjmp	.+148    	; 0x1828 <DIO_Set_4MSBValue+0x116>
		break;
	case DIO_PORTB:
		PORTB&=0x0F;
    1794:	a8 e3       	ldi	r26, 0x38	; 56
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e3       	ldi	r30, 0x38	; 56
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8f 70       	andi	r24, 0x0F	; 15
    17a0:	8c 93       	st	X, r24
		PORTB|=Copy_u8PinsValue<<4;
    17a2:	a8 e3       	ldi	r26, 0x38	; 56
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	82 95       	swap	r24
    17b6:	92 95       	swap	r25
    17b8:	90 7f       	andi	r25, 0xF0	; 240
    17ba:	98 27       	eor	r25, r24
    17bc:	80 7f       	andi	r24, 0xF0	; 240
    17be:	98 27       	eor	r25, r24
    17c0:	82 2b       	or	r24, r18
    17c2:	8c 93       	st	X, r24
    17c4:	31 c0       	rjmp	.+98     	; 0x1828 <DIO_Set_4MSBValue+0x116>
		break;
	case DIO_PORTC:
		PORTC&=0x0F;
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 70       	andi	r24, 0x0F	; 15
    17d2:	8c 93       	st	X, r24
		PORTC|=Copy_u8PinsValue<<4;
    17d4:	a5 e3       	ldi	r26, 0x35	; 53
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e3       	ldi	r30, 0x35	; 53
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	82 95       	swap	r24
    17e8:	92 95       	swap	r25
    17ea:	90 7f       	andi	r25, 0xF0	; 240
    17ec:	98 27       	eor	r25, r24
    17ee:	80 7f       	andi	r24, 0xF0	; 240
    17f0:	98 27       	eor	r25, r24
    17f2:	82 2b       	or	r24, r18
    17f4:	8c 93       	st	X, r24
    17f6:	18 c0       	rjmp	.+48     	; 0x1828 <DIO_Set_4MSBValue+0x116>
		break;
	case DIO_PORTD:
		PORTD&=0x0F;
    17f8:	a2 e3       	ldi	r26, 0x32	; 50
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	8c 93       	st	X, r24
		PORTD|=Copy_u8PinsValue<<4;
    1806:	a2 e3       	ldi	r26, 0x32	; 50
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e2 e3       	ldi	r30, 0x32	; 50
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	82 95       	swap	r24
    181a:	92 95       	swap	r25
    181c:	90 7f       	andi	r25, 0xF0	; 240
    181e:	98 27       	eor	r25, r24
    1820:	80 7f       	andi	r24, 0xF0	; 240
    1822:	98 27       	eor	r25, r24
    1824:	82 2b       	or	r24, r18
    1826:	8c 93       	st	X, r24
		break;
	}
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_Set_4LSBValue>:
void DIO_Set_4LSBValue(u8 Copy_u8PortID,u8 Copy_u8PinsValue)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_Set_4LSBValue+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_Set_4LSBValue+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3c 83       	std	Y+4, r19	; 0x04
    184e:	2b 83       	std	Y+3, r18	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	29 f1       	breq	.+74     	; 0x18a4 <DIO_Set_4LSBValue+0x6e>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	2c f4       	brge	.+10     	; 0x186e <DIO_Set_4LSBValue+0x38>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	61 f0       	breq	.+24     	; 0x1884 <DIO_Set_4LSBValue+0x4e>
    186c:	4a c0       	rjmp	.+148    	; 0x1902 <DIO_Set_4LSBValue+0xcc>
    186e:	2b 81       	ldd	r18, Y+3	; 0x03
    1870:	3c 81       	ldd	r19, Y+4	; 0x04
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	31 f1       	breq	.+76     	; 0x18c4 <DIO_Set_4LSBValue+0x8e>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	89 f1       	breq	.+98     	; 0x18e4 <DIO_Set_4LSBValue+0xae>
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <DIO_Set_4LSBValue+0xcc>
	{
	case DIO_PORTA:
		PORTA&=0xF0;
    1884:	ab e3       	ldi	r26, 0x3B	; 59
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e3       	ldi	r30, 0x3B	; 59
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 7f       	andi	r24, 0xF0	; 240
    1890:	8c 93       	st	X, r24
		PORTA|=Copy_u8PinsValue;
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	90 81       	ld	r25, Z
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	89 2b       	or	r24, r25
    18a0:	8c 93       	st	X, r24
    18a2:	2f c0       	rjmp	.+94     	; 0x1902 <DIO_Set_4LSBValue+0xcc>
		break;
	case DIO_PORTB:
		PORTB&=0xF0;
    18a4:	a8 e3       	ldi	r26, 0x38	; 56
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e3       	ldi	r30, 0x38	; 56
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 7f       	andi	r24, 0xF0	; 240
    18b0:	8c 93       	st	X, r24
		PORTB|=Copy_u8PinsValue;
    18b2:	a8 e3       	ldi	r26, 0x38	; 56
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	90 81       	ld	r25, Z
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	89 2b       	or	r24, r25
    18c0:	8c 93       	st	X, r24
    18c2:	1f c0       	rjmp	.+62     	; 0x1902 <DIO_Set_4LSBValue+0xcc>
		break;
	case DIO_PORTC:
		PORTC&=0xF0;
    18c4:	a5 e3       	ldi	r26, 0x35	; 53
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 7f       	andi	r24, 0xF0	; 240
    18d0:	8c 93       	st	X, r24
		PORTC|=Copy_u8PinsValue;
    18d2:	a5 e3       	ldi	r26, 0x35	; 53
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e3       	ldi	r30, 0x35	; 53
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	90 81       	ld	r25, Z
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	89 2b       	or	r24, r25
    18e0:	8c 93       	st	X, r24
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <DIO_Set_4LSBValue+0xcc>
		break;
	case DIO_PORTD:
		PORTD&=0xF0;
    18e4:	a2 e3       	ldi	r26, 0x32	; 50
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 7f       	andi	r24, 0xF0	; 240
    18f0:	8c 93       	st	X, r24
		PORTD|=Copy_u8PinsValue;
    18f2:	a2 e3       	ldi	r26, 0x32	; 50
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	90 81       	ld	r25, Z
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	89 2b       	or	r24, r25
    1900:	8c 93       	st	X, r24
		break;
	}
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <EEPROM_vidsenddatabyte>:
#include"STD_TYPES.h"
#include"TWI_Interface.h"
#include"EEPROM_private.h"
#include<util\delay.h>

void EEPROM_vidsenddatabyte(u8 Copy_u8locationaddress,u8 Copy_u8pagenumber,u8 Copy_u8databyte){
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	62 97       	sbiw	r28, 0x12	; 18
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	88 8b       	std	Y+16, r24	; 0x10
    1926:	69 8b       	std	Y+17, r22	; 0x11
    1928:	4a 8b       	std	Y+18, r20	; 0x12
	u8 Loc_u8addresspacket;
	Loc_u8addresspacket=EEPROM_Fixed_Address|Copy_u8pagenumber;
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	80 65       	ori	r24, 0x50	; 80
    192e:	8f 87       	std	Y+15, r24	; 0x0f

	/*1-send start condition*/
	TWI_SendStartCondition();
    1930:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <TWI_SendStartCondition>
	/*2-send slave address(page number)+write request*/
	TWI_SendSlaveAddress_WithWrite(Loc_u8addresspacket);
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	0e 94 35 14 	call	0x286a	; 0x286a <TWI_SendSlaveAddress_WithWrite>
	/*3-send 8 bites location address*/
	TWI_MasterSendData(Copy_u8locationaddress);
    193a:	88 89       	ldd	r24, Y+16	; 0x10
    193c:	0e 94 a5 14 	call	0x294a	; 0x294a <TWI_MasterSendData>
	/*4-send data byte to the memory location*/
	TWI_MasterSendData(Copy_u8databyte);
    1940:	8a 89       	ldd	r24, Y+18	; 0x12
    1942:	0e 94 a5 14 	call	0x294a	; 0x294a <TWI_MasterSendData>
	/*5-SEND STOP Condition*/
	TWI_SendStopCondition();
    1946:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TWI_SendStopCondition>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e2       	ldi	r26, 0x20	; 32
    1950:	b1 e4       	ldi	r27, 0x41	; 65
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a e7       	ldi	r20, 0x7A	; 122
    1968:	55 e4       	ldi	r21, 0x45	; 69
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <EEPROM_vidsenddatabyte+0x8c>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <EEPROM_vidsenddatabyte+0x10a>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <EEPROM_vidsenddatabyte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <EEPROM_vidsenddatabyte+0xec>
    19de:	80 e9       	ldi	r24, 0x90	; 144
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <EEPROM_vidsenddatabyte+0xda>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <EEPROM_vidsenddatabyte+0xce>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <EEPROM_vidsenddatabyte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <EEPROM_vidsenddatabyte+0x116>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	/*delay until the write cycle is finished*/
	_delay_ms(10);

}
    1a2e:	62 96       	adiw	r28, 0x12	; 18
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <EEPROM_readdatabyte>:
/*read data byte from EEPROM*/
u8 EEPROM_readdatabyte(u8 Copy_u8locationaddress,u8 Copy_u8pagenumber){
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <EEPROM_readdatabyte+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <EEPROM_readdatabyte+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    1a4e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8addresspacket;
	u8  Loc_u8datareceive;
		Loc_u8addresspacket=EEPROM_Fixed_Address|Copy_u8pagenumber;
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	80 65       	ori	r24, 0x50	; 80
    1a54:	89 83       	std	Y+1, r24	; 0x01

		/*1-send start condition*/
		TWI_SendStartCondition();
    1a56:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <TWI_SendStartCondition>
		/*2-send slave address(page number)+write request*/
		TWI_SendSlaveAddress_WithWrite(Loc_u8addresspacket);
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	0e 94 35 14 	call	0x286a	; 0x286a <TWI_SendSlaveAddress_WithWrite>
		/*3-send 8 bites location address*/
		TWI_MasterSendData(Copy_u8locationaddress);
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	0e 94 a5 14 	call	0x294a	; 0x294a <TWI_MasterSendData>
		/*4-send repeated start */
		TWI_SendRepeatedStartCondition();
    1a66:	0e 94 0b 14 	call	0x2816	; 0x2816 <TWI_SendRepeatedStartCondition>
		/*5-send slave address(page number)+read request*/
		TWI_SendSlaveAddress_WithRead(Loc_u8addresspacket);
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	0e 94 6d 14 	call	0x28da	; 0x28da <TWI_SendSlaveAddress_WithRead>
		/*Read data byte from memory location*/
		TWI_MasterReadData(&Loc_u8datareceive);
    1a70:	ce 01       	movw	r24, r28
    1a72:	02 96       	adiw	r24, 0x02	; 2
    1a74:	0e 94 ce 14 	call	0x299c	; 0x299c <TWI_MasterReadData>
		/*5-SEND STOP Condition*/
		TWI_SendStopCondition();
    1a78:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TWI_SendStopCondition>
		return Loc_u8datareceive;
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <EXTI0_VidInit>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"EXTI_Private.h"
#include"EXTI_Interface.h"
void EXTI0_VidInit(void)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	/*set sense control*/
#if SET_SENSE_CONTROL==EXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
    1a94:	a5 e5       	ldi	r26, 0x55	; 85
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e5       	ldi	r30, 0x55	; 85
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    1aa2:	a5 e5       	ldi	r26, 0x55	; 85
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e5 e5       	ldi	r30, 0x55	; 85
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 60       	ori	r24, 0x01	; 1
    1aae:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
#else
#error"Sense Control Options is not Valid......"
#endif
	/*Enable To EXTI0*/
	SET_BIT(GICR,6);
    1ab0:	ab e5       	ldi	r26, 0x5B	; 91
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	eb e5       	ldi	r30, 0x5B	; 91
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 64       	ori	r24, 0x40	; 64
    1abc:	8c 93       	st	X, r24
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <EXTI1_VidInit>:
void EXTI1_VidInit(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	/*set sense control*/
#if SET_SENSE_CONTROL==EXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    1acc:	a5 e5       	ldi	r26, 0x55	; 85
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e5 e5       	ldi	r30, 0x55	; 85
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    1ada:	a5 e5       	ldi	r26, 0x55	; 85
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e5 e5       	ldi	r30, 0x55	; 85
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	84 60       	ori	r24, 0x04	; 4
    1ae6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,2);
#else
#error"Sense Control Options is not Valid......"
#endif
	/*Enable To EXTI1*/
	SET_BIT(GICR,7);
    1ae8:	ab e5       	ldi	r26, 0x5B	; 91
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	eb e5       	ldi	r30, 0x5B	; 91
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	8c 93       	st	X, r24
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <EXTI2_VidInit>:
void EXTI2_VidInit(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	/*set sense control*/
#if SET_SENSE_CONTROL==EXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    1b04:	a4 e5       	ldi	r26, 0x54	; 84
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e4 e5       	ldi	r30, 0x54	; 84
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR,6);
#else
#error"Sense Control Options is not Valid......"
#endif
	/*Enable To EXTI2*/
	SET_BIT(GICR,5);
    1b12:	ab e5       	ldi	r26, 0x5B	; 91
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	eb e5       	ldi	r30, 0x5B	; 91
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 62       	ori	r24, 0x20	; 32
    1b1e:	8c 93       	st	X, r24
}
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <EXTI_VidSet_SenseControl>:

void EXTI_VidSet_SenseControl(u8 Copy_u8EXTI_Number,u8 Copy_u8SenseControl)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <EXTI_VidSet_SenseControl+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <EXTI_VidSet_SenseControl+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_Number)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3c 83       	std	Y+4, r19	; 0x04
    1b3e:	2b 83       	std	Y+3, r18	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <EXTI_VidSet_SenseControl+0x26>
    1b4a:	54 c0       	rjmp	.+168    	; 0x1bf4 <EXTI_VidSet_SenseControl+0xce>
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <EXTI_VidSet_SenseControl+0x32>
    1b56:	96 c0       	rjmp	.+300    	; 0x1c84 <EXTI_VidSet_SenseControl+0x15e>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <EXTI_VidSet_SenseControl+0x3c>
    1b60:	a6 c0       	rjmp	.+332    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==EXTI_RISING_EDGE)
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 23       	and	r24, r24
    1b66:	79 f4       	brne	.+30     	; 0x1b86 <EXTI_VidSet_SenseControl+0x60>
		{
			SET_BIT(MCUCR,1);
    1b68:	a5 e5       	ldi	r26, 0x55	; 85
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e5 e5       	ldi	r30, 0x55	; 85
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1b76:	a5 e5       	ldi	r26, 0x55	; 85
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e5       	ldi	r30, 0x55	; 85
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	81 60       	ori	r24, 0x01	; 1
    1b82:	8c 93       	st	X, r24
    1b84:	94 c0       	rjmp	.+296    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_FALLING_EDGE)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	79 f4       	brne	.+30     	; 0x1baa <EXTI_VidSet_SenseControl+0x84>
		{
			SET_BIT(MCUCR,1);
    1b8c:	a5 e5       	ldi	r26, 0x55	; 85
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e5       	ldi	r30, 0x55	; 85
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	82 60       	ori	r24, 0x02	; 2
    1b98:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1b9a:	a5 e5       	ldi	r26, 0x55	; 85
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8e 7f       	andi	r24, 0xFE	; 254
    1ba6:	8c 93       	st	X, r24
    1ba8:	82 c0       	rjmp	.+260    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_ANY_LOGICAL_CHANGE)
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	79 f4       	brne	.+30     	; 0x1bce <EXTI_VidSet_SenseControl+0xa8>
		{
			CLR_BIT(MCUCR,1);
    1bb0:	a5 e5       	ldi	r26, 0x55	; 85
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e5       	ldi	r30, 0x55	; 85
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8d 7f       	andi	r24, 0xFD	; 253
    1bbc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1bbe:	a5 e5       	ldi	r26, 0x55	; 85
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e5       	ldi	r30, 0x55	; 85
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	81 60       	ori	r24, 0x01	; 1
    1bca:	8c 93       	st	X, r24
    1bcc:	70 c0       	rjmp	.+224    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_LOW_LEVEL)
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <EXTI_VidSet_SenseControl+0xb0>
    1bd4:	6c c0       	rjmp	.+216    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		{
			CLR_BIT(MCUCR,1);
    1bd6:	a5 e5       	ldi	r26, 0x55	; 85
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e5       	ldi	r30, 0x55	; 85
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8d 7f       	andi	r24, 0xFD	; 253
    1be2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1be4:	a5 e5       	ldi	r26, 0x55	; 85
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e5 e5       	ldi	r30, 0x55	; 85
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8e 7f       	andi	r24, 0xFE	; 254
    1bf0:	8c 93       	st	X, r24
    1bf2:	5d c0       	rjmp	.+186    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==EXTI_RISING_EDGE)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	88 23       	and	r24, r24
    1bf8:	79 f4       	brne	.+30     	; 0x1c18 <EXTI_VidSet_SenseControl+0xf2>
		{
			SET_BIT(MCUCR,3);
    1bfa:	a5 e5       	ldi	r26, 0x55	; 85
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e5       	ldi	r30, 0x55	; 85
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 60       	ori	r24, 0x08	; 8
    1c06:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1c08:	a5 e5       	ldi	r26, 0x55	; 85
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e5       	ldi	r30, 0x55	; 85
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	84 60       	ori	r24, 0x04	; 4
    1c14:	8c 93       	st	X, r24
    1c16:	4b c0       	rjmp	.+150    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_FALLING_EDGE)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	79 f4       	brne	.+30     	; 0x1c3c <EXTI_VidSet_SenseControl+0x116>
		{
			SET_BIT(MCUCR,3);
    1c1e:	a5 e5       	ldi	r26, 0x55	; 85
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e5 e5       	ldi	r30, 0x55	; 85
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 60       	ori	r24, 0x08	; 8
    1c2a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1c2c:	a5 e5       	ldi	r26, 0x55	; 85
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e5 e5       	ldi	r30, 0x55	; 85
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8b 7f       	andi	r24, 0xFB	; 251
    1c38:	8c 93       	st	X, r24
    1c3a:	39 c0       	rjmp	.+114    	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_ANY_LOGICAL_CHANGE)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	79 f4       	brne	.+30     	; 0x1c60 <EXTI_VidSet_SenseControl+0x13a>
		{
			CLR_BIT(MCUCR,3);
    1c42:	a5 e5       	ldi	r26, 0x55	; 85
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e5       	ldi	r30, 0x55	; 85
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	87 7f       	andi	r24, 0xF7	; 247
    1c4e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1c50:	a5 e5       	ldi	r26, 0x55	; 85
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e5       	ldi	r30, 0x55	; 85
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	84 60       	ori	r24, 0x04	; 4
    1c5c:	8c 93       	st	X, r24
    1c5e:	27 c0       	rjmp	.+78     	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_LOW_LEVEL)
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	21 f5       	brne	.+72     	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		{
			CLR_BIT(MCUCR,3);
    1c66:	a5 e5       	ldi	r26, 0x55	; 85
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e5       	ldi	r30, 0x55	; 85
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	87 7f       	andi	r24, 0xF7	; 247
    1c72:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1c74:	a5 e5       	ldi	r26, 0x55	; 85
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e5       	ldi	r30, 0x55	; 85
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8b 7f       	andi	r24, 0xFB	; 251
    1c80:	8c 93       	st	X, r24
    1c82:	15 c0       	rjmp	.+42     	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		break;
		break;
	case EXTI2:
		if(Copy_u8SenseControl==EXTI_RISING_EDGE)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	88 23       	and	r24, r24
    1c88:	41 f4       	brne	.+16     	; 0x1c9a <EXTI_VidSet_SenseControl+0x174>
		{
			SET_BIT(MCUCSR,6);
    1c8a:	a4 e5       	ldi	r26, 0x54	; 84
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e4 e5       	ldi	r30, 0x54	; 84
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 64       	ori	r24, 0x40	; 64
    1c96:	8c 93       	st	X, r24
    1c98:	0a c0       	rjmp	.+20     	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		}
		else if(Copy_u8SenseControl==EXTI_FALLING_EDGE)
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	39 f4       	brne	.+14     	; 0x1cae <EXTI_VidSet_SenseControl+0x188>
		{
			CLR_BIT(MCUCSR,6);
    1ca0:	a4 e5       	ldi	r26, 0x54	; 84
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e4 e5       	ldi	r30, 0x54	; 84
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 7b       	andi	r24, 0xBF	; 191
    1cac:	8c 93       	st	X, r24
		}
		break;
	}
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <EXTI0_VidDis>:

void EXTI0_VidDis(void)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    1cc4:	ab e5       	ldi	r26, 0x5B	; 91
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	eb e5       	ldi	r30, 0x5B	; 91
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 7b       	andi	r24, 0xBF	; 191
    1cd0:	8c 93       	st	X, r24
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <EXTI1_VidDis>:
void EXTI1_VidDis(void)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
    1ce0:	ab e5       	ldi	r26, 0x5B	; 91
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	eb e5       	ldi	r30, 0x5B	; 91
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 77       	andi	r24, 0x7F	; 127
    1cec:	8c 93       	st	X, r24
}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <EXTI2_VidDis>:
void EXTI2_VidDis(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
    1cfc:	ab e5       	ldi	r26, 0x5B	; 91
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e5       	ldi	r30, 0x5B	; 91
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 7d       	andi	r24, 0xDF	; 223
    1d08:	8c 93       	st	X, r24
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <GIE_VidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"GIE_Private.h"

void GIE_VidEnable(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1d18:	af e5       	ldi	r26, 0x5F	; 95
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ef e5       	ldi	r30, 0x5F	; 95
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	80 68       	ori	r24, 0x80	; 128
    1d24:	8c 93       	st	X, r24
}
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <GIE_VidDisable>:
void GIE_VidDisable(void)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1d34:	af e5       	ldi	r26, 0x5F	; 95
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ef e5       	ldi	r30, 0x5F	; 95
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	8c 93       	st	X, r24
}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <System_Init>:
//u16 CurrentState;
u8  datareceive;


void System_Init(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	GIE_VidDisable();
    1d50:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GIE_VidDisable>
	ADC_Init();
    1d54:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
	Seven_seg_OFF();
    1d58:	0e 94 8f 12 	call	0x251e	; 0x251e <Seven_seg_OFF>
	Seven_seg_Init();
    1d5c:	0e 94 be 11 	call	0x237c	; 0x237c <Seven_seg_Init>

	/*Set EXTI0 pin as an input and active pull up resistor*/
	//DIO_SetPinDirection(DIO_PORTD,PIN2,PIN_INPUT);

	//Initialization for cooler & Heater & LEDS & PushButtons
	DIO_SetPinDirection(COOLER_PORT, COOLER_PIN, PIN_OUTPUT);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	65 e0       	ldi	r22, 0x05	; 5
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(HEATER_PORT,HEATER_PIN,PIN_OUTPUT);
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>

	DIO_SetPinDirection(LED_PORT,LED_PIN,PIN_OUTPUT);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	67 e0       	ldi	r22, 0x07	; 7
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SYSTEM_LED_PORT,SYSTEM_LED_PIN,PIN_OUTPUT);
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	63 e0       	ldi	r22, 0x03	; 3
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>

	DIO_SetPinDirection(PUSH_BUTTON_SYSTEM_PORT,PUSH_BUTTON_SYSTEM_PIN,PIN_INPUT);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(PUSH_BUTTON_Cooler_PORT,PUSH_BUTTON_Cooler_PIN,PIN_INPUT);
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	63 e0       	ldi	r22, 0x03	; 3
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(PUSH_BUTTON_Heater_PORT,PUSH_BUTTON_Heater_PIN,PIN_INPUT);
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>

	/*Set  Timer Preload*/
	//TIMER0_VidSET_Preload(156);

	/*Intialization for EXTI0*/
	EXTI0_VidInit();
    1da6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <EXTI0_VidInit>
	EXTI1_VidInit();
    1daa:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <EXTI1_VidInit>
	EXTI2_VidInit();
    1dae:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <EXTI2_VidInit>

	/*Timer Initialization*/
	TIMER0_VidSET_CTCValue(78); //0.01 Sec -> 16MHz = 156, 8MHz = 78
    1db2:	8e e4       	ldi	r24, 0x4E	; 78
    1db4:	0e 94 6f 13 	call	0x26de	; 0x26de <TIMER0_VidSET_CTCValue>
	TIMER1_Init();
    1db8:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER1_Init>
	TIMER0_VidInit();
    1dbc:	0e 94 29 13 	call	0x2652	; 0x2652 <TIMER0_VidInit>
	/*Enable to GIE*/
	GIE_VidEnable();
    1dc0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <GIE_VidEnable>

	DIO_SetPinValue(SYSTEM_LED_PORT,SYSTEM_LED_PIN,PIN_HIGH);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	TWI_VidInitMaster(0);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	0e 94 92 13 	call	0x2724	; 0x2724 <TWI_VidInitMaster>
	if(EEPROM_readdatabyte(0,0) != 0xFF)   // check if there are no data in EEPROM (first time to use it)
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <EEPROM_readdatabyte>
    1ddc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dde:	59 f0       	breq	.+22     	; 0x1df6 <System_Init+0xae>
	{
		desired_temp = EEPROM_readdatabyte(0,0);       // read data from byte number 0 in external EEPROM IC
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <EEPROM_readdatabyte>
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	90 93 78 01 	sts	0x0178, r25
    1df0:	80 93 77 01 	sts	0x0177, r24
    1df4:	06 c0       	rjmp	.+12     	; 0x1e02 <System_Init+0xba>
	}
	else
	{
		desired_temp = Init_Desired_Temp;
    1df6:	8c e3       	ldi	r24, 0x3C	; 60
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	90 93 78 01 	sts	0x0178, r25
    1dfe:	80 93 77 01 	sts	0x0177, r24

	}
	EEPROM_vidsenddatabyte(0,0,desired_temp);
    1e02:	80 91 77 01 	lds	r24, 0x0177
    1e06:	90 91 78 01 	lds	r25, 0x0178
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	49 2f       	mov	r20, r25
    1e12:	0e 94 88 0c 	call	0x1910	; 0x1910 <EEPROM_vidsenddatabyte>
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <System_Dis>:

void System_Dis(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	GIE_VidDisable();
    1e24:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <GIE_VidDisable>
	DIO_SetPinValue(SYSTEM_LED_PORT,SYSTEM_LED_PIN,PIN_LOW);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	63 e0       	ldi	r22, 0x03	; 3
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(LED_PORT,LED_PIN,PIN_LOW);
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	67 e0       	ldi	r22, 0x07	; 7
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(HEATER_PORT,HEATER_PIN,PIN_LOW);
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	64 e0       	ldi	r22, 0x04	; 4
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(COOLER_PORT,COOLER_PIN,PIN_LOW);
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	65 e0       	ldi	r22, 0x05	; 5
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	EXTI0_VidDis();
    1e50:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <EXTI0_VidDis>
	EXTI1_VidDis();
    1e54:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <EXTI1_VidDis>
	TIMER0_OFF();
    1e58:	0e 94 7d 13 	call	0x26fa	; 0x26fa <TIMER0_OFF>
	TIMER1_OFF();
    1e5c:	0e 94 06 13 	call	0x260c	; 0x260c <TIMER1_OFF>
	Seven_seg_OFF();
    1e60:	0e 94 8f 12 	call	0x251e	; 0x251e <Seven_seg_OFF>
	GIE_VidEnable();
    1e64:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <GIE_VidEnable>
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <Current_State>:

u16 Current_State(u16 PrevState,u16 CurrentTemp)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	28 97       	sbiw	r28, 0x08	; 8
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	7e 83       	std	Y+6, r23	; 0x06
    1e88:	6d 83       	std	Y+5, r22	; 0x05
	//u16 desired;
	//Setting_Mode
	//CLR_BIT(DDRD,2);
	//CLR_BIT(DDRD,6 );
	//DIO_GetPinValue
	u16 NewState = PrevState;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
	switch (PrevState) {
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	98 87       	std	Y+8, r25	; 0x08
    1e98:	8f 83       	std	Y+7, r24	; 0x07
    1e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9c:	98 85       	ldd	r25, Y+8	; 0x08
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	c9 f0       	breq	.+50     	; 0x1ed6 <Current_State+0x68>
    1ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea6:	98 85       	ldd	r25, Y+8	; 0x08
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	18 f1       	brcs	.+70     	; 0x1ef4 <Current_State+0x86>
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	98 85       	ldd	r25, Y+8	; 0x08
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	c9 f5       	brne	.+114    	; 0x1f2a <Current_State+0xbc>
		case COOLING:
			if(CurrentTemp < desired_temp - 5)
    1eb8:	80 91 77 01 	lds	r24, 0x0177
    1ebc:	90 91 78 01 	lds	r25, 0x0178
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	25 50       	subi	r18, 0x05	; 5
    1ec4:	30 40       	sbci	r19, 0x00	; 0
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	82 17       	cp	r24, r18
    1ecc:	93 07       	cpc	r25, r19
    1ece:	68 f5       	brcc	.+90     	; 0x1f2a <Current_State+0xbc>
				NewState = NOTHING;
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	2a c0       	rjmp	.+84     	; 0x1f2a <Current_State+0xbc>
			break;
		case HEATING:
			if(CurrentTemp > desired_temp + 5)
    1ed6:	80 91 77 01 	lds	r24, 0x0177
    1eda:	90 91 78 01 	lds	r25, 0x0178
    1ede:	9c 01       	movw	r18, r24
    1ee0:	2b 5f       	subi	r18, 0xFB	; 251
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	28 17       	cp	r18, r24
    1eea:	39 07       	cpc	r19, r25
    1eec:	f0 f4       	brcc	.+60     	; 0x1f2a <Current_State+0xbc>
				NewState = NOTHING;
    1eee:	1a 82       	std	Y+2, r1	; 0x02
    1ef0:	19 82       	std	Y+1, r1	; 0x01
    1ef2:	1b c0       	rjmp	.+54     	; 0x1f2a <Current_State+0xbc>
			break;
		case NOTHING:
			if(CurrentTemp < desired_temp)
    1ef4:	20 91 77 01 	lds	r18, 0x0177
    1ef8:	30 91 78 01 	lds	r19, 0x0178
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	82 17       	cp	r24, r18
    1f02:	93 07       	cpc	r25, r19
    1f04:	28 f4       	brcc	.+10     	; 0x1f10 <Current_State+0xa2>
				NewState = HEATING;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	0d c0       	rjmp	.+26     	; 0x1f2a <Current_State+0xbc>
			else if (CurrentTemp > desired_temp)
    1f10:	20 91 77 01 	lds	r18, 0x0177
    1f14:	30 91 78 01 	lds	r19, 0x0178
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	28 17       	cp	r18, r24
    1f1e:	39 07       	cpc	r19, r25
    1f20:	20 f4       	brcc	.+8      	; 0x1f2a <Current_State+0xbc>
				NewState = COOLING;
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	return NewState;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f2e:	28 96       	adiw	r28, 0x08	; 8
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <Current_Temp>:

u16 Current_Temp(void)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <Current_Temp+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <Current_Temp+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	f32 Digital_Value;
	ADC_StartConversion(0);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_StartConversion>
	Digital_Value=ADC_ReadADCValue();
    1f52:	0e 94 73 07 	call	0xee6	; 0xee6 <ADC_ReadADCValue>
    1f56:	cc 01       	movw	r24, r24
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	ab 83       	std	Y+3, r26	; 0x03
    1f6e:	bc 83       	std	Y+4, r27	; 0x04

	return Digital_Value*5/1024*150/1.5;
    1f70:	69 81       	ldd	r22, Y+1	; 0x01
    1f72:	7a 81       	ldd	r23, Y+2	; 0x02
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 ea       	ldi	r20, 0xA0	; 160
    1f7e:	50 e4       	ldi	r21, 0x40	; 64
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	46 e1       	ldi	r20, 0x16	; 22
    1fa6:	53 e4       	ldi	r21, 0x43	; 67
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 ec       	ldi	r20, 0xC0	; 192
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <Setting_Mode>:


u8 Setting_Mode(u8* Flag)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	61 97       	sbiw	r28, 0x11	; 17
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	99 8b       	std	Y+17, r25	; 0x11
    1ff4:	88 8b       	std	Y+16, r24	; 0x10

	//CLR_BIT(DDRD,2);
	//CLR_BIT(DDRD,6);

	//seven_Seg_Display(current_temperature); // Set Temperature From EEPROM
	u8 ChangeStatus = 0;
    1ff6:	1f 86       	std	Y+15, r1	; 0x0f
	if((DIO_GetPinValue(PUSH_BUTTON_Heater_PORT,PUSH_BUTTON_Heater_PIN)==1) && (desired_temp<Max_Temp))
    1ff8:	83 e0       	ldi	r24, 0x03	; 3
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_GetPinValue>
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	91 f4       	brne	.+36     	; 0x2028 <Setting_Mode+0x4a>
    2004:	80 91 77 01 	lds	r24, 0x0177
    2008:	90 91 78 01 	lds	r25, 0x0178
    200c:	8b 34       	cpi	r24, 0x4B	; 75
    200e:	91 05       	cpc	r25, r1
    2010:	58 f4       	brcc	.+22     	; 0x2028 <Setting_Mode+0x4a>
	{
		desired_temp += 5;
    2012:	80 91 77 01 	lds	r24, 0x0177
    2016:	90 91 78 01 	lds	r25, 0x0178
    201a:	05 96       	adiw	r24, 0x05	; 5
    201c:	90 93 78 01 	sts	0x0178, r25
    2020:	80 93 77 01 	sts	0x0177, r24
		ChangeStatus = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if ((DIO_GetPinValue(PUSH_BUTTON_Cooler_PORT,PUSH_BUTTON_Cooler_PIN )==1)&& (desired_temp>Min_Temp))
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	63 e0       	ldi	r22, 0x03	; 3
    202c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_GetPinValue>
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	91 f4       	brne	.+36     	; 0x2058 <Setting_Mode+0x7a>
    2034:	80 91 77 01 	lds	r24, 0x0177
    2038:	90 91 78 01 	lds	r25, 0x0178
    203c:	84 32       	cpi	r24, 0x24	; 36
    203e:	91 05       	cpc	r25, r1
    2040:	58 f0       	brcs	.+22     	; 0x2058 <Setting_Mode+0x7a>
	{
		desired_temp-= 5;
    2042:	80 91 77 01 	lds	r24, 0x0177
    2046:	90 91 78 01 	lds	r25, 0x0178
    204a:	05 97       	sbiw	r24, 0x05	; 5
    204c:	90 93 78 01 	sts	0x0178, r25
    2050:	80 93 77 01 	sts	0x0177, r24
		ChangeStatus = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if(ChangeStatus)
    2058:	8f 85       	ldd	r24, Y+15	; 0x0f
    205a:	88 23       	and	r24, r24
    205c:	51 f0       	breq	.+20     	; 0x2072 <Setting_Mode+0x94>
	{
		EEPROM_vidsenddatabyte(0,0,desired_temp);
    205e:	80 91 77 01 	lds	r24, 0x0177
    2062:	90 91 78 01 	lds	r25, 0x0178
    2066:	98 2f       	mov	r25, r24
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	49 2f       	mov	r20, r25
    206e:	0e 94 88 0c 	call	0x1910	; 0x1910 <EEPROM_vidsenddatabyte>
	}
	if(*Flag == 1|| ChangeStatus)
    2072:	e8 89       	ldd	r30, Y+16	; 0x10
    2074:	f9 89       	ldd	r31, Y+17	; 0x11
    2076:	80 81       	ld	r24, Z
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	21 f0       	breq	.+8      	; 0x2084 <Setting_Mode+0xa6>
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	88 23       	and	r24, r24
    2080:	09 f4       	brne	.+2      	; 0x2084 <Setting_Mode+0xa6>
    2082:	7d c0       	rjmp	.+250    	; 0x217e <Setting_Mode+0x1a0>
	{
		*Flag = 0;
    2084:	e8 89       	ldd	r30, Y+16	; 0x10
    2086:	f9 89       	ldd	r31, Y+17	; 0x11
    2088:	10 82       	st	Z, r1
		seven_Seg_Display(desired_temp);
    208a:	80 91 77 01 	lds	r24, 0x0177
    208e:	90 91 78 01 	lds	r25, 0x0178
    2092:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <seven_Seg_Display>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a4 e3       	ldi	r26, 0x34	; 52
    209c:	b3 e4       	ldi	r27, 0x43	; 67
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	9c 87       	std	Y+12, r25	; 0x0c
    20a2:	ad 87       	std	Y+13, r26	; 0x0d
    20a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	55 e4       	ldi	r21, 0x45	; 69
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8f 83       	std	Y+7, r24	; 0x07
    20c0:	98 87       	std	Y+8, r25	; 0x08
    20c2:	a9 87       	std	Y+9, r26	; 0x09
    20c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <Setting_Mode+0x10a>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <Setting_Mode+0x188>
	else if (__tmp > 65535)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <Setting_Mode+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <Setting_Mode+0x16a>
    212a:	80 e9       	ldi	r24, 0x90	; 144
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <Setting_Mode+0x158>
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <Setting_Mode+0x14c>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <Setting_Mode+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <Setting_Mode+0x194>
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(180);
		Seven_seg_OFF();
    217a:	0e 94 8f 12 	call	0x251e	; 0x251e <Seven_seg_OFF>
	}
	return ChangeStatus;
    217e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2180:	61 96       	adiw	r28, 0x11	; 17
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <SystemFun>:




void SystemFun(u16 Desired_State,u8* Flag)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <SystemFun+0x6>
    2198:	00 d0       	rcall	.+0      	; 0x219a <SystemFun+0x8>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	7c 83       	std	Y+4, r23	; 0x04
    21a4:	6b 83       	std	Y+3, r22	; 0x03
	if(Desired_State == HEATING)
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	91 05       	cpc	r25, r1
    21ae:	59 f4       	brne	.+22     	; 0x21c6 <SystemFun+0x34>
	{
		DIO_SetPinValue(HEATER_PORT,HEATER_PIN ,HEATER_ON);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	64 e0       	ldi	r22, 0x04	; 4
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
		DIO_SetPinValue(COOLER_PORT,COOLER_PIN ,Cooler_OFF);
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	65 e0       	ldi	r22, 0x05	; 5
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
    21c4:	1a c0       	rjmp	.+52     	; 0x21fa <SystemFun+0x68>
	}
	else if(Desired_State == COOLING)
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	82 30       	cpi	r24, 0x02	; 2
    21cc:	91 05       	cpc	r25, r1
    21ce:	59 f4       	brne	.+22     	; 0x21e6 <SystemFun+0x54>
	{
		DIO_SetPinValue(COOLER_PORT,COOLER_PIN ,Cooler_ON);
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	65 e0       	ldi	r22, 0x05	; 5
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
		DIO_SetPinValue(HEATER_PORT,HEATER_PIN ,HEATER_OFF);
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	64 e0       	ldi	r22, 0x04	; 4
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
    21e4:	0a c0       	rjmp	.+20     	; 0x21fa <SystemFun+0x68>
	}
	else
	{
		DIO_SetPinValue(HEATER_PORT,HEATER_PIN ,HEATER_OFF);
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	64 e0       	ldi	r22, 0x04	; 4
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
		DIO_SetPinValue(COOLER_PORT,COOLER_PIN ,Cooler_OFF);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	65 e0       	ldi	r22, 0x05	; 5
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	}

	HeaterLamp(Desired_State,Flag);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	b9 01       	movw	r22, r18
    2204:	0e 94 0b 11 	call	0x2216	; 0x2216 <HeaterLamp>
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <HeaterLamp>:

void HeaterLamp(u16 Desired_State,u8* Flag)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	62 97       	sbiw	r28, 0x12	; 18
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    222e:	7a 8b       	std	Y+18, r23	; 0x12
    2230:	69 8b       	std	Y+17, r22	; 0x11
	if(Desired_State == HEATING)
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	98 89       	ldd	r25, Y+16	; 0x10
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	31 f4       	brne	.+12     	; 0x2248 <HeaterLamp+0x32>
	{
		DIO_SetPinValue(LED_PORT,LED_PIN ,PIN_HIGH);
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	67 e0       	ldi	r22, 0x07	; 7
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
    2246:	91 c0       	rjmp	.+290    	; 0x236a <HeaterLamp+0x154>
	}
	else if(Desired_State == COOLING && *(Flag)== 1)
    2248:	8f 85       	ldd	r24, Y+15	; 0x0f
    224a:	98 89       	ldd	r25, Y+16	; 0x10
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	91 05       	cpc	r25, r1
    2250:	09 f0       	breq	.+2      	; 0x2254 <HeaterLamp+0x3e>
    2252:	86 c0       	rjmp	.+268    	; 0x2360 <HeaterLamp+0x14a>
    2254:	e9 89       	ldd	r30, Y+17	; 0x11
    2256:	fa 89       	ldd	r31, Y+18	; 0x12
    2258:	80 81       	ld	r24, Z
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	09 f0       	breq	.+2      	; 0x2260 <HeaterLamp+0x4a>
    225e:	80 c0       	rjmp	.+256    	; 0x2360 <HeaterLamp+0x14a>
	{
		DIO_SetPinValue(LED_PORT,LED_PIN ,PIN_HIGH);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	67 e0       	ldi	r22, 0x07	; 7
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a8 e4       	ldi	r26, 0x48	; 72
    2270:	b2 e4       	ldi	r27, 0x42	; 66
    2272:	8b 87       	std	Y+11, r24	; 0x0b
    2274:	9c 87       	std	Y+12, r25	; 0x0c
    2276:	ad 87       	std	Y+13, r26	; 0x0d
    2278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	55 e4       	ldi	r21, 0x45	; 69
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8f 83       	std	Y+7, r24	; 0x07
    2294:	98 87       	std	Y+8, r25	; 0x08
    2296:	a9 87       	std	Y+9, r26	; 0x09
    2298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <HeaterLamp+0xa6>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <HeaterLamp+0x124>
	else if (__tmp > 65535)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <HeaterLamp+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22da:	9e 85       	ldd	r25, Y+14	; 0x0e
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <HeaterLamp+0x106>
    22fe:	80 e9       	ldi	r24, 0x90	; 144
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <HeaterLamp+0xf4>
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <HeaterLamp+0xe8>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <HeaterLamp+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <HeaterLamp+0x130>
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		DIO_SetPinValue(LED_PORT,LED_PIN ,PIN_LOW);
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
		*(Flag) = 0;
    2358:	e9 89       	ldd	r30, Y+17	; 0x11
    235a:	fa 89       	ldd	r31, Y+18	; 0x12
    235c:	10 82       	st	Z, r1
    235e:	05 c0       	rjmp	.+10     	; 0x236a <HeaterLamp+0x154>
	}
	else
		DIO_SetPinValue(LED_PORT,LED_PIN ,PIN_LOW);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	67 e0       	ldi	r22, 0x07	; 7
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
}
    236a:	62 96       	adiw	r28, 0x12	; 18
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <Seven_seg_Init>:
	//heating off
	DIO_SetPinValue(LED_HEATER_PORT,LED_HEATER_PIN, LED_HEATER_OFF );

}*/
void Seven_seg_Init(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINA,PIN_OUTPUT);
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINB,PIN_OUTPUT);
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	65 e0       	ldi	r22, 0x05	; 5
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINC,PIN_OUTPUT);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PIND,PIN_OUTPUT);
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	67 e0       	ldi	r22, 0x07	; 7
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>

	DIO_SetPinDirection(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINA,PIN_OUTPUT);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	64 e0       	ldi	r22, 0x04	; 4
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINB,PIN_OUTPUT);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	65 e0       	ldi	r22, 0x05	; 5
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINC,PIN_OUTPUT);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	66 e0       	ldi	r22, 0x06	; 6
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
	DIO_SetPinDirection(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PIND,PIN_OUTPUT);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	67 e0       	ldi	r22, 0x07	; 7
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>

	DIO_SetPinDirection(SEVEN_SEGMENT_ENABLE_PORT,SEVEN_SEGMENT_ENABLE_PIN,PIN_OUTPUT);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 aa 07 	call	0xf54	; 0xf54 <DIO_SetPinDirection>
}
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <seven_Seg_Display>:


void seven_Seg_Display(u16 Temp)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <seven_Seg_Display+0x6>
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINA,(Temp/10)>>3&1);
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	2a e0       	ldi	r18, 0x0A	; 10
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	b9 01       	movw	r22, r18
    23fc:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2400:	cb 01       	movw	r24, r22
    2402:	96 95       	lsr	r25
    2404:	87 95       	ror	r24
    2406:	96 95       	lsr	r25
    2408:	87 95       	ror	r24
    240a:	96 95       	lsr	r25
    240c:	87 95       	ror	r24
    240e:	98 2f       	mov	r25, r24
    2410:	91 70       	andi	r25, 0x01	; 1
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	64 e0       	ldi	r22, 0x04	; 4
    2416:	49 2f       	mov	r20, r25
    2418:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINB,(Temp/10)>>2&1);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	9a 81       	ldd	r25, Y+2	; 0x02
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	b9 01       	movw	r22, r18
    2426:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    242a:	cb 01       	movw	r24, r22
    242c:	96 95       	lsr	r25
    242e:	87 95       	ror	r24
    2430:	96 95       	lsr	r25
    2432:	87 95       	ror	r24
    2434:	98 2f       	mov	r25, r24
    2436:	91 70       	andi	r25, 0x01	; 1
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	65 e0       	ldi	r22, 0x05	; 5
    243c:	49 2f       	mov	r20, r25
    243e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PINC,(Temp/10)>>1&1);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	2a e0       	ldi	r18, 0x0A	; 10
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	b9 01       	movw	r22, r18
    244c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2450:	cb 01       	movw	r24, r22
    2452:	96 95       	lsr	r25
    2454:	87 95       	ror	r24
    2456:	98 2f       	mov	r25, r24
    2458:	91 70       	andi	r25, 0x01	; 1
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	66 e0       	ldi	r22, 0x06	; 6
    245e:	49 2f       	mov	r20, r25
    2460:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_LEFT_PORT,SEVEN_SEGMENT_LEFT_PIND,(Temp/10)&1);
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	b9 01       	movw	r22, r18
    246e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2472:	cb 01       	movw	r24, r22
    2474:	98 2f       	mov	r25, r24
    2476:	91 70       	andi	r25, 0x01	; 1
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	67 e0       	ldi	r22, 0x07	; 7
    247c:	49 2f       	mov	r20, r25
    247e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>

	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINA,(Temp%10)>>3&1);
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	b9 01       	movw	r22, r18
    248c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2490:	96 95       	lsr	r25
    2492:	87 95       	ror	r24
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	96 95       	lsr	r25
    249a:	87 95       	ror	r24
    249c:	98 2f       	mov	r25, r24
    249e:	91 70       	andi	r25, 0x01	; 1
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	64 e0       	ldi	r22, 0x04	; 4
    24a4:	49 2f       	mov	r20, r25
    24a6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINB,(Temp%10)>>2&1);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	2a e0       	ldi	r18, 0x0A	; 10
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	b9 01       	movw	r22, r18
    24b4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    24b8:	96 95       	lsr	r25
    24ba:	87 95       	ror	r24
    24bc:	96 95       	lsr	r25
    24be:	87 95       	ror	r24
    24c0:	98 2f       	mov	r25, r24
    24c2:	91 70       	andi	r25, 0x01	; 1
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	65 e0       	ldi	r22, 0x05	; 5
    24c8:	49 2f       	mov	r20, r25
    24ca:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINC,(Temp%10)>>1&1);
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	2a e0       	ldi	r18, 0x0A	; 10
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	b9 01       	movw	r22, r18
    24d8:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	98 2f       	mov	r25, r24
    24e2:	91 70       	andi	r25, 0x01	; 1
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	66 e0       	ldi	r22, 0x06	; 6
    24e8:	49 2f       	mov	r20, r25
    24ea:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PIND,(Temp%10)&1);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	2a e0       	ldi	r18, 0x0A	; 10
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	b9 01       	movw	r22, r18
    24f8:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    24fc:	98 2f       	mov	r25, r24
    24fe:	91 70       	andi	r25, 0x01	; 1
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	67 e0       	ldi	r22, 0x07	; 7
    2504:	49 2f       	mov	r20, r25
    2506:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>

	DIO_SetPinValue(SEVEN_SEGMENT_ENABLE_PORT,SEVEN_SEGMENT_ENABLE_PIN,PIN_LOW);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <Seven_seg_OFF>:
void Seven_seg_OFF(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(SEVEN_SEGMENT_ENABLE_PORT,SEVEN_SEGMENT_ENABLE_PIN,PIN_HIGH);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	62 e0       	ldi	r22, 0x02	; 2
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_SetPinValue>

	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINA,PIN_LOW);
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINB,PIN_LOW);
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PINC,PIN_LOW);
	DIO_SetPinValue(SEVEN_SEGMENT_RIGHT_PORT,SEVEN_SEGMENT_RIGHT_PIND,PIN_LOW);*/
}
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <TIMER1_Init>:

void TIMER1_Init(void)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_SetCTCValue(31250); // 1 Sec -> 16MHz =62500, 8MHz = 31250
    253e:	82 e1       	ldi	r24, 0x12	; 18
    2540:	9a e7       	ldi	r25, 0x7A	; 122
    2542:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <TIMER1_SetCTCValue>

	/*select the Prescaler_256*/
	CLR_BIT(TCCR1B,0);
    2546:	ae e4       	ldi	r26, 0x4E	; 78
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	ee e4       	ldi	r30, 0x4E	; 78
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	8e 7f       	andi	r24, 0xFE	; 254
    2552:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    2554:	ae e4       	ldi	r26, 0x4E	; 78
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	ee e4       	ldi	r30, 0x4E	; 78
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	8d 7f       	andi	r24, 0xFD	; 253
    2560:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2);
    2562:	ae e4       	ldi	r26, 0x4E	; 78
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ee e4       	ldi	r30, 0x4E	; 78
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	84 60       	ori	r24, 0x04	; 4
    256e:	8c 93       	st	X, r24

	/*Select Normal Mode (Overflow)*/
	CLR_BIT(TCCR1A,0);
    2570:	af e4       	ldi	r26, 0x4F	; 79
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	ef e4       	ldi	r30, 0x4F	; 79
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	8e 7f       	andi	r24, 0xFE	; 254
    257c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    257e:	af e4       	ldi	r26, 0x4F	; 79
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	ef e4       	ldi	r30, 0x4F	; 79
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	8d 7f       	andi	r24, 0xFD	; 253
    258a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    258c:	ae e4       	ldi	r26, 0x4E	; 78
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	ee e4       	ldi	r30, 0x4E	; 78
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	88 60       	ori	r24, 0x08	; 8
    2598:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    259a:	ae e4       	ldi	r26, 0x4E	; 78
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	ee e4       	ldi	r30, 0x4E	; 78
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	8f 7e       	andi	r24, 0xEF	; 239
    25a6:	8c 93       	st	X, r24

	/*Timer OCA interrupt enable*/
	SET_BIT(TIMSK,4);
    25a8:	a9 e5       	ldi	r26, 0x59	; 89
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e9 e5       	ldi	r30, 0x59	; 89
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	80 61       	ori	r24, 0x10	; 16
    25b4:	8c 93       	st	X, r24
	TIMER1_Reset();
    25b6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <TIMER1_Reset>
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <TIMER1_Reset>:

void TIMER1_Reset(void)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <TIMER1_Reset+0x6>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 &= 0;
    25ca:	ec e4       	ldi	r30, 0x4C	; 76
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	ec e4       	ldi	r30, 0x4C	; 76
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	11 82       	std	Z+1, r1	; 0x01
    25d8:	10 82       	st	Z, r1
	Timer1Count = 0;
    25da:	10 92 6a 01 	sts	0x016A, r1
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <TIMER1_SetCTCValue>:
void TIMER1_SetCTCValue(u16 Copy_u16CTCValue)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <TIMER1_SetCTCValue+0x6>
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16CTCValue;
    25f6:	ea e4       	ldi	r30, 0x4A	; 74
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <TIMER1_OFF>:
void TIMER1_OFF(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,5);
    2614:	a9 e5       	ldi	r26, 0x59	; 89
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e9 e5       	ldi	r30, 0x59	; 89
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8f 7d       	andi	r24, 0xDF	; 223
    2620:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,4);
    2622:	a9 e5       	ldi	r26, 0x59	; 89
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e9 e5       	ldi	r30, 0x59	; 89
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8f 7e       	andi	r24, 0xEF	; 239
    262e:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,3);
    2630:	a9 e5       	ldi	r26, 0x59	; 89
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e9 e5       	ldi	r30, 0x59	; 89
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	87 7f       	andi	r24, 0xF7	; 247
    263c:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,2);
    263e:	a9 e5       	ldi	r26, 0x59	; 89
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e9 e5       	ldi	r30, 0x59	; 89
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	8b 7f       	andi	r24, 0xFB	; 251
    264a:	8c 93       	st	X, r24

}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <TIMER0_VidInit>:
#include"BIT_MATH.h"
#include"TIMER_Private.h"
#include"TIMER_Config.h"

void TIMER0_VidInit(void)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
	/* Set Suitable Prescaler */
	TCCR0&=0xF8;
    265a:	a3 e5       	ldi	r26, 0x53	; 83
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e3 e5       	ldi	r30, 0x53	; 83
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 7f       	andi	r24, 0xF8	; 248
    2666:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SET_PRESCALER;
    2668:	a3 e5       	ldi	r26, 0x53	; 83
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e3 e5       	ldi	r30, 0x53	; 83
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	85 60       	ori	r24, 0x05	; 5
    2674:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
	/*Enable to overflow interrupt*/
	SET_BIT(TIMSK,0);

#elif TIMER0_SET_MODE == TIMER_CTC_MODE
	CLR_BIT(TCCR0,6);
    2676:	a3 e5       	ldi	r26, 0x53	; 83
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e3 e5       	ldi	r30, 0x53	; 83
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	8f 7b       	andi	r24, 0xBF	; 191
    2682:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    2684:	a3 e5       	ldi	r26, 0x53	; 83
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e3 e5       	ldi	r30, 0x53	; 83
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 60       	ori	r24, 0x08	; 8
    2690:	8c 93       	st	X, r24
	/*Enable to CTC interrupt*/
	SET_BIT(TIMSK,1);
    2692:	a9 e5       	ldi	r26, 0x59	; 89
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e9 e5       	ldi	r30, 0x59	; 89
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	8c 93       	st	X, r24
#if TIMER0_OC0_MODE==TIMER0_OC0_DISCONNECTED
	CLR_BIT(TCCR0,5);
    26a0:	a3 e5       	ldi	r26, 0x53	; 83
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e3 e5       	ldi	r30, 0x53	; 83
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	8f 7d       	andi	r24, 0xDF	; 223
    26ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    26ae:	a3 e5       	ldi	r26, 0x53	; 83
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e3 e5       	ldi	r30, 0x53	; 83
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 7e       	andi	r24, 0xEF	; 239
    26ba:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
	SET_BIT(TCCR0,3);
#else
#error" TIMER Mode is not valid "
#endif
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <TIMER0_VidSET_Preload>:
void TIMER0_VidSET_Preload(u8 Copy_u8PreloadValue)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	0f 92       	push	r0
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8PreloadValue;
    26ce:	e2 e5       	ldi	r30, 0x52	; 82
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	80 83       	st	Z, r24
}
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <TIMER0_VidSET_CTCValue>:

void TIMER0_VidSET_CTCValue(u8 Copy_u8CTCValue)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	0f 92       	push	r0
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
    26ea:	ec e5       	ldi	r30, 0x5C	; 92
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	80 83       	st	Z, r24
}
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <TIMER0_OFF>:
void TIMER0_OFF()
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    2702:	a9 e5       	ldi	r26, 0x59	; 89
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e9 e5       	ldi	r30, 0x59	; 89
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8e 7f       	andi	r24, 0xFE	; 254
    270e:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
    2710:	a9 e5       	ldi	r26, 0x59	; 89
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e9 e5       	ldi	r30, 0x59	; 89
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	8c 93       	st	X, r24
}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <TWI_VidInitMaster>:
#include"BIT_MATH.h"
#include"TWI_Private.h"
#include"TWI_Interface.h"

void TWI_VidInitMaster(u8 Copy_u8Address)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,6);
    2730:	a6 e5       	ldi	r26, 0x56	; 86
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e6 e5       	ldi	r30, 0x56	; 86
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 64       	ori	r24, 0x40	; 64
    273c:	8c 93       	st	X, r24
	/*Check if the master node will be addressed*/
	if(Copy_u8Address!=0)
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	88 23       	and	r24, r24
    2742:	29 f0       	breq	.+10     	; 0x274e <TWI_VidInitMaster+0x2a>
	{
	/*Set the Required address in the 7MSB of TWAR*/
	TWAR=Copy_u8Address<<1;
    2744:	e2 e2       	ldi	r30, 0x22	; 34
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	88 0f       	add	r24, r24
    274c:	80 83       	st	Z, r24
	{
		/*Do Nothing*/
	}
	/*Set SCL Frequency To 400kHz,with 16MHz system Frequency*/
	/*1- Set TWBR=12*/
	TWBR=12;
    274e:	e0 e2       	ldi	r30, 0x20	; 32
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	8c e0       	ldi	r24, 0x0C	; 12
    2754:	80 83       	st	Z, r24
	/*Set Precaler bits(TWPS0,TWPS1)*/
	CLR_BIT(TWSR,1);
    2756:	a1 e2       	ldi	r26, 0x21	; 33
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 e2       	ldi	r30, 0x21	; 33
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8d 7f       	andi	r24, 0xFD	; 253
    2762:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
    2764:	a1 e2       	ldi	r26, 0x21	; 33
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e1 e2       	ldi	r30, 0x21	; 33
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8e 7f       	andi	r24, 0xFE	; 254
    2770:	8c 93       	st	X, r24
	/*Enable TWI*/
	SET_BIT(TWCR,2);
    2772:	a6 e5       	ldi	r26, 0x56	; 86
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e6 e5       	ldi	r30, 0x56	; 86
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	84 60       	ori	r24, 0x04	; 4
    277e:	8c 93       	st	X, r24
}
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <TWI_VidInitSlave>:
void TWI_VidInitSlave(u8 Copy_u8Address)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	0f 92       	push	r0
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,6);
    2794:	a6 e5       	ldi	r26, 0x56	; 86
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e6 e5       	ldi	r30, 0x56	; 86
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	80 64       	ori	r24, 0x40	; 64
    27a0:	8c 93       	st	X, r24
	/*Set the Required address in the 7MSB of TWAR*/
	TWAR=Copy_u8Address<<1;
    27a2:	e2 e2       	ldi	r30, 0x22	; 34
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 0f       	add	r24, r24
    27aa:	80 83       	st	Z, r24
	/*Enable TWI*/
	SET_BIT(TWCR,2);
    27ac:	a6 e5       	ldi	r26, 0x56	; 86
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e6 e5       	ldi	r30, 0x56	; 86
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	84 60       	ori	r24, 0x04	; 4
    27b8:	8c 93       	st	X, r24
}
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <TWI_SendStartCondition>:
TWI_ErrStatus TWI_SendStartCondition(void)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	0f 92       	push	r0
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error=NoError;
    27cc:	19 82       	std	Y+1, r1	; 0x01
	/*send Start Condition*/
	SET_BIT(TWCR,5);
    27ce:	a6 e5       	ldi	r26, 0x56	; 86
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e6 e5       	ldi	r30, 0x56	; 86
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	80 62       	ori	r24, 0x20	; 32
    27da:	8c 93       	st	X, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    27dc:	a6 e5       	ldi	r26, 0x56	; 86
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e6 e5       	ldi	r30, 0x56	; 86
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	80 68       	ori	r24, 0x80	; 128
    27e8:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    27ea:	e6 e5       	ldi	r30, 0x56	; 86
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	88 23       	and	r24, r24
    27f2:	dc f7       	brge	.-10     	; 0x27ea <TWI_SendStartCondition+0x28>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X08)
    27f4:	e1 e2       	ldi	r30, 0x21	; 33
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	88 7f       	andi	r24, 0xF8	; 248
    2800:	90 70       	andi	r25, 0x00	; 0
    2802:	88 30       	cpi	r24, 0x08	; 8
    2804:	91 05       	cpc	r25, r1
    2806:	11 f0       	breq	.+4      	; 0x280c <TWI_SendStartCondition+0x4a>
	{
		Local_Error=StartConditionError;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    280c:	89 81       	ldd	r24, Y+1	; 0x01
}
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <TWI_SendRepeatedStartCondition>:
TWI_ErrStatus TWI_SendRepeatedStartCondition(void)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error=NoError;
    2820:	19 82       	std	Y+1, r1	; 0x01
	/*send Start Condition*/
	SET_BIT(TWCR,5);
    2822:	a6 e5       	ldi	r26, 0x56	; 86
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e6 e5       	ldi	r30, 0x56	; 86
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	80 62       	ori	r24, 0x20	; 32
    282e:	8c 93       	st	X, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    2830:	a6 e5       	ldi	r26, 0x56	; 86
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e6 e5       	ldi	r30, 0x56	; 86
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    283e:	e6 e5       	ldi	r30, 0x56	; 86
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	88 23       	and	r24, r24
    2846:	dc f7       	brge	.-10     	; 0x283e <TWI_SendRepeatedStartCondition+0x28>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X10)
    2848:	e1 e2       	ldi	r30, 0x21	; 33
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	88 7f       	andi	r24, 0xF8	; 248
    2854:	90 70       	andi	r25, 0x00	; 0
    2856:	80 31       	cpi	r24, 0x10	; 16
    2858:	91 05       	cpc	r25, r1
    285a:	11 f0       	breq	.+4      	; 0x2860 <TWI_SendRepeatedStartCondition+0x4a>
	{
		Local_Error=RepeatedStartError;
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    2860:	89 81       	ldd	r24, Y+1	; 0x01
}
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <TWI_SendSlaveAddress_WithWrite>:
TWI_ErrStatus TWI_SendSlaveAddress_WithWrite(u8 Copy_u8SlaveAddress)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <TWI_SendSlaveAddress_WithWrite+0x6>
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    2876:	19 82       	std	Y+1, r1	; 0x01
	/*Send 7bits Slave Address To the Bus*/
	TWDR=Copy_u8SlaveAddress<<1;
    2878:	e3 e2       	ldi	r30, 0x23	; 35
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	88 0f       	add	r24, r24
    2880:	80 83       	st	Z, r24
	/*Set the Write Request in the LSB bit in the data Register*/
	CLR_BIT(TWDR,0);
    2882:	a3 e2       	ldi	r26, 0x23	; 35
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e3 e2       	ldi	r30, 0x23	; 35
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	8e 7f       	andi	r24, 0xFE	; 254
    288e:	8c 93       	st	X, r24
	/*Clear The start Condition Bit*/
	CLR_BIT(TWCR,5);
    2890:	a6 e5       	ldi	r26, 0x56	; 86
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e6 e5       	ldi	r30, 0x56	; 86
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8f 7d       	andi	r24, 0xDF	; 223
    289c:	8c 93       	st	X, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    289e:	a6 e5       	ldi	r26, 0x56	; 86
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e6 e5       	ldi	r30, 0x56	; 86
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 68       	ori	r24, 0x80	; 128
    28aa:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    28ac:	e6 e5       	ldi	r30, 0x56	; 86
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	dc f7       	brge	.-10     	; 0x28ac <TWI_SendSlaveAddress_WithWrite+0x42>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X18)
    28b6:	e1 e2       	ldi	r30, 0x21	; 33
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	88 7f       	andi	r24, 0xF8	; 248
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	88 31       	cpi	r24, 0x18	; 24
    28c6:	91 05       	cpc	r25, r1
    28c8:	11 f0       	breq	.+4      	; 0x28ce <TWI_SendSlaveAddress_WithWrite+0x64>
	{
		Local_Error=SlaveAddressWithWriteError;
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <TWI_SendSlaveAddress_WithRead>:
TWI_ErrStatus TWI_SendSlaveAddress_WithRead(u8 Copy_u8SlaveAddress)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <TWI_SendSlaveAddress_WithRead+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    28e6:	19 82       	std	Y+1, r1	; 0x01
	/*Send 7bits Slave Address To the Bus*/
	TWDR=Copy_u8SlaveAddress<<1;
    28e8:	e3 e2       	ldi	r30, 0x23	; 35
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	88 0f       	add	r24, r24
    28f0:	80 83       	st	Z, r24
	/*Set the Read Request in the LSB bit in the data Register*/
	SET_BIT(TWDR,0);
    28f2:	a3 e2       	ldi	r26, 0x23	; 35
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e3 e2       	ldi	r30, 0x23	; 35
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	81 60       	ori	r24, 0x01	; 1
    28fe:	8c 93       	st	X, r24
	/*Clear The start Condition Bit*/
	CLR_BIT(TWCR,5);
    2900:	a6 e5       	ldi	r26, 0x56	; 86
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e6 e5       	ldi	r30, 0x56	; 86
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8f 7d       	andi	r24, 0xDF	; 223
    290c:	8c 93       	st	X, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    290e:	a6 e5       	ldi	r26, 0x56	; 86
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e6 e5       	ldi	r30, 0x56	; 86
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	80 68       	ori	r24, 0x80	; 128
    291a:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    291c:	e6 e5       	ldi	r30, 0x56	; 86
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	dc f7       	brge	.-10     	; 0x291c <TWI_SendSlaveAddress_WithRead+0x42>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X40)
    2926:	e1 e2       	ldi	r30, 0x21	; 33
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 7f       	andi	r24, 0xF8	; 248
    2932:	90 70       	andi	r25, 0x00	; 0
    2934:	80 34       	cpi	r24, 0x40	; 64
    2936:	91 05       	cpc	r25, r1
    2938:	11 f0       	breq	.+4      	; 0x293e <TWI_SendSlaveAddress_WithRead+0x64>
	{
		Local_Error=SlaveAddressWithReadError;
    293a:	84 e0       	ldi	r24, 0x04	; 4
    293c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <TWI_MasterSendData>:
TWI_ErrStatus TWI_MasterSendData(u8 Copy_u8Data)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <TWI_MasterSendData+0x6>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    2956:	19 82       	std	Y+1, r1	; 0x01
	/*Send 8bits Data Byte To the Bus*/
	TWDR=Copy_u8Data;
    2958:	e3 e2       	ldi	r30, 0x23	; 35
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	80 83       	st	Z, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    2960:	a6 e5       	ldi	r26, 0x56	; 86
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e6 e5       	ldi	r30, 0x56	; 86
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	80 68       	ori	r24, 0x80	; 128
    296c:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    296e:	e6 e5       	ldi	r30, 0x56	; 86
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	88 23       	and	r24, r24
    2976:	dc f7       	brge	.-10     	; 0x296e <TWI_MasterSendData+0x24>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X28)
    2978:	e1 e2       	ldi	r30, 0x21	; 33
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	88 7f       	andi	r24, 0xF8	; 248
    2984:	90 70       	andi	r25, 0x00	; 0
    2986:	88 32       	cpi	r24, 0x28	; 40
    2988:	91 05       	cpc	r25, r1
    298a:	11 f0       	breq	.+4      	; 0x2990 <TWI_MasterSendData+0x46>
	{
		Local_Error=MasterWriteError;
    298c:	85 e0       	ldi	r24, 0x05	; 5
    298e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    2990:	89 81       	ldd	r24, Y+1	; 0x01
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <TWI_MasterReadData>:
TWI_ErrStatus TWI_MasterReadData(u8* Copy_pu8Data)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <TWI_MasterReadData+0x6>
    29a2:	0f 92       	push	r0
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    29ac:	19 82       	std	Y+1, r1	; 0x01
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    29ae:	a6 e5       	ldi	r26, 0x56	; 86
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e6 e5       	ldi	r30, 0x56	; 86
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	80 68       	ori	r24, 0x80	; 128
    29ba:	8c 93       	st	X, r24
	/*Wait Until The operation is finished and the flag is raised */
	while(GET_BIT(TWCR,7)==0);
    29bc:	e6 e5       	ldi	r30, 0x56	; 86
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	88 23       	and	r24, r24
    29c4:	dc f7       	brge	.-10     	; 0x29bc <TWI_MasterReadData+0x20>
	/*Check the operation status*/
	if((TWSR&0xF8)!=0X50)
    29c6:	e1 e2       	ldi	r30, 0x21	; 33
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	88 7f       	andi	r24, 0xF8	; 248
    29d2:	90 70       	andi	r25, 0x00	; 0
    29d4:	80 35       	cpi	r24, 0x50	; 80
    29d6:	91 05       	cpc	r25, r1
    29d8:	19 f0       	breq	.+6      	; 0x29e0 <TWI_MasterReadData+0x44>
	{
		Local_Error=MasterReadError;
    29da:	86 e0       	ldi	r24, 0x06	; 6
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <TWI_MasterReadData+0x50>
	}
	else
	{
		*Copy_pu8Data=TWDR;
    29e0:	e3 e2       	ldi	r30, 0x23	; 35
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	ea 81       	ldd	r30, Y+2	; 0x02
    29e8:	fb 81       	ldd	r31, Y+3	; 0x03
    29ea:	80 83       	st	Z, r24
	}
	return Local_Error;
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <TWI_SendStopCondition>:
TWI_ErrStatus TWI_SendStopCondition(void)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	0f 92       	push	r0
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(TWCR,4);
    2a04:	a6 e5       	ldi	r26, 0x56	; 86
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e6 e5       	ldi	r30, 0x56	; 86
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	80 61       	ori	r24, 0x10	; 16
    2a10:	8c 93       	st	X, r24
	/*Clear The Interrupt Flag To start The Previous Operation*/
	SET_BIT(TWCR,7);
    2a12:	a6 e5       	ldi	r26, 0x56	; 86
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e6 e5       	ldi	r30, 0x56	; 86
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	80 68       	ori	r24, 0x80	; 128
    2a1e:	8c 93       	st	X, r24
}
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <main>:
u16 SystemState = SYSTEM_OFF;
u8 Flag_1_Sec =0;
u8 Flag_5_Sec =0;

int main(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <main+0x6>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	System_Init();
    2a32:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <System_Init>
	Temp = Current_Temp();
    2a36:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Current_Temp>
    2a3a:	90 93 69 01 	sts	0x0169, r25
    2a3e:	80 93 68 01 	sts	0x0168, r24
	AvrgTemp = Temp;
    2a42:	80 91 68 01 	lds	r24, 0x0168
    2a46:	90 91 69 01 	lds	r25, 0x0169
    2a4a:	90 93 7d 01 	sts	0x017D, r25
    2a4e:	80 93 7c 01 	sts	0x017C, r24
	while(1)
	{
		switch (SystemState) {
    2a52:	80 91 6e 01 	lds	r24, 0x016E
    2a56:	90 91 6f 01 	lds	r25, 0x016F
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	91 05       	cpc	r25, r1
    2a66:	71 f0       	breq	.+28     	; 0x2a84 <main+0x5c>
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	91 05       	cpc	r25, r1
    2a70:	30 f0       	brcs	.+12     	; 0x2a7e <main+0x56>
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	82 30       	cpi	r24, 0x02	; 2
    2a78:	91 05       	cpc	r25, r1
    2a7a:	19 f1       	breq	.+70     	; 0x2ac2 <main+0x9a>
    2a7c:	ea cf       	rjmp	.-44     	; 0x2a52 <main+0x2a>
		case SYSTEM_OFF:
			System_Dis();
    2a7e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <System_Dis>
    2a82:	e7 cf       	rjmp	.-50     	; 0x2a52 <main+0x2a>
			break;
		case SYSTEM_ON:
			seven_Seg_Display(Temp);
    2a84:	80 91 68 01 	lds	r24, 0x0168
    2a88:	90 91 69 01 	lds	r25, 0x0169
    2a8c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <seven_Seg_Display>
			State = Current_State(State,AvrgTemp);
    2a90:	80 91 6c 01 	lds	r24, 0x016C
    2a94:	90 91 6d 01 	lds	r25, 0x016D
    2a98:	20 91 7c 01 	lds	r18, 0x017C
    2a9c:	30 91 7d 01 	lds	r19, 0x017D
    2aa0:	b9 01       	movw	r22, r18
    2aa2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <Current_State>
    2aa6:	90 93 6d 01 	sts	0x016D, r25
    2aaa:	80 93 6c 01 	sts	0x016C, r24
			SystemFun(State,&Flag_1_Sec);
    2aae:	80 91 6c 01 	lds	r24, 0x016C
    2ab2:	90 91 6d 01 	lds	r25, 0x016D
    2ab6:	20 e7       	ldi	r18, 0x70	; 112
    2ab8:	31 e0       	ldi	r19, 0x01	; 1
    2aba:	b9 01       	movw	r22, r18
    2abc:	0e 94 c9 10 	call	0x2192	; 0x2192 <SystemFun>
    2ac0:	c8 cf       	rjmp	.-112    	; 0x2a52 <main+0x2a>
			break;
		case SYSTEM_SET:
			EXTI0_VidDis();
    2ac2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <EXTI0_VidDis>
			EXTI1_VidDis();
    2ac6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <EXTI1_VidDis>
			TIMER1_Reset();
    2aca:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <TIMER1_Reset>
			Flag_5_Sec = 0;
    2ace:	10 92 71 01 	sts	0x0171, r1
			Flag_1_Sec = 1; //-> for showing
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	80 93 70 01 	sts	0x0170, r24
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <main+0xc6>
			while(Flag_5_Sec == 0)
			{
				if(Setting_Mode(&Flag_1_Sec)==1)
    2ada:	80 e7       	ldi	r24, 0x70	; 112
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <Setting_Mode>
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	21 f4       	brne	.+8      	; 0x2aee <main+0xc6>
				{
					Flag_5_Sec = 0;
    2ae6:	10 92 71 01 	sts	0x0171, r1
					TIMER1_Reset();
    2aea:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <TIMER1_Reset>
			EXTI0_VidDis();
			EXTI1_VidDis();
			TIMER1_Reset();
			Flag_5_Sec = 0;
			Flag_1_Sec = 1; //-> for showing
			while(Flag_5_Sec == 0)
    2aee:	80 91 71 01 	lds	r24, 0x0171
    2af2:	88 23       	and	r24, r24
    2af4:	91 f3       	breq	.-28     	; 0x2ada <main+0xb2>
				{
					Flag_5_Sec = 0;
					TIMER1_Reset();
				}
			}
			SystemState = SYSTEM_ON;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	90 93 6f 01 	sts	0x016F, r25
    2afe:	80 93 6e 01 	sts	0x016E, r24
			EXTI0_VidInit();
    2b02:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <EXTI0_VidInit>
			EXTI1_VidInit();
    2b06:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <EXTI1_VidInit>
    2b0a:	a3 cf       	rjmp	.-186    	; 0x2a52 <main+0x2a>

00002b0c <__vector_1>:

/*Interrupt Service Routine (ISR)*/
//Up Push Button ISR
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    2b0c:	1f 92       	push	r1
    2b0e:	0f 92       	push	r0
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	0f 92       	push	r0
    2b14:	11 24       	eor	r1, r1
    2b16:	2f 93       	push	r18
    2b18:	3f 93       	push	r19
    2b1a:	4f 93       	push	r20
    2b1c:	5f 93       	push	r21
    2b1e:	6f 93       	push	r22
    2b20:	7f 93       	push	r23
    2b22:	8f 93       	push	r24
    2b24:	9f 93       	push	r25
    2b26:	af 93       	push	r26
    2b28:	bf 93       	push	r27
    2b2a:	ef 93       	push	r30
    2b2c:	ff 93       	push	r31
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
	Seven_seg_OFF();
    2b36:	0e 94 8f 12 	call	0x251e	; 0x251e <Seven_seg_OFF>
	SystemState = SYSTEM_SET;
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	90 93 6f 01 	sts	0x016F, r25
    2b42:	80 93 6e 01 	sts	0x016E, r24
	while(DIO_GetPinValue(PUSH_BUTTON_Heater_PORT,PUSH_BUTTON_Heater_PIN )==1)
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_GetPinValue>
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	d1 f3       	breq	.-12     	; 0x2b46 <__vector_1+0x3a>
	{
		//For preventing any change on the first press
	}
}
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	ff 91       	pop	r31
    2b58:	ef 91       	pop	r30
    2b5a:	bf 91       	pop	r27
    2b5c:	af 91       	pop	r26
    2b5e:	9f 91       	pop	r25
    2b60:	8f 91       	pop	r24
    2b62:	7f 91       	pop	r23
    2b64:	6f 91       	pop	r22
    2b66:	5f 91       	pop	r21
    2b68:	4f 91       	pop	r20
    2b6a:	3f 91       	pop	r19
    2b6c:	2f 91       	pop	r18
    2b6e:	0f 90       	pop	r0
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	0f 90       	pop	r0
    2b74:	1f 90       	pop	r1
    2b76:	18 95       	reti

00002b78 <__vector_2>:
//Down Push Button ISR
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    2b78:	1f 92       	push	r1
    2b7a:	0f 92       	push	r0
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	0f 92       	push	r0
    2b80:	11 24       	eor	r1, r1
    2b82:	2f 93       	push	r18
    2b84:	3f 93       	push	r19
    2b86:	4f 93       	push	r20
    2b88:	5f 93       	push	r21
    2b8a:	6f 93       	push	r22
    2b8c:	7f 93       	push	r23
    2b8e:	8f 93       	push	r24
    2b90:	9f 93       	push	r25
    2b92:	af 93       	push	r26
    2b94:	bf 93       	push	r27
    2b96:	ef 93       	push	r30
    2b98:	ff 93       	push	r31
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	Seven_seg_OFF();
    2ba2:	0e 94 8f 12 	call	0x251e	; 0x251e <Seven_seg_OFF>
	SystemState = SYSTEM_SET;
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	90 93 6f 01 	sts	0x016F, r25
    2bae:	80 93 6e 01 	sts	0x016E, r24
	while(DIO_GetPinValue(PUSH_BUTTON_Cooler_PORT,PUSH_BUTTON_Cooler_PIN )==1)
    2bb2:	83 e0       	ldi	r24, 0x03	; 3
    2bb4:	63 e0       	ldi	r22, 0x03	; 3
    2bb6:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_GetPinValue>
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	d1 f3       	breq	.-12     	; 0x2bb2 <__vector_2+0x3a>
	{
		//For preventing any change on the first press
	}
}
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	ff 91       	pop	r31
    2bc4:	ef 91       	pop	r30
    2bc6:	bf 91       	pop	r27
    2bc8:	af 91       	pop	r26
    2bca:	9f 91       	pop	r25
    2bcc:	8f 91       	pop	r24
    2bce:	7f 91       	pop	r23
    2bd0:	6f 91       	pop	r22
    2bd2:	5f 91       	pop	r21
    2bd4:	4f 91       	pop	r20
    2bd6:	3f 91       	pop	r19
    2bd8:	2f 91       	pop	r18
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	0f 90       	pop	r0
    2be0:	1f 90       	pop	r1
    2be2:	18 95       	reti

00002be4 <__vector_3>:
//ON-OFF Push Button ISR
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	2f 93       	push	r18
    2bf0:	3f 93       	push	r19
    2bf2:	4f 93       	push	r20
    2bf4:	5f 93       	push	r21
    2bf6:	6f 93       	push	r22
    2bf8:	7f 93       	push	r23
    2bfa:	8f 93       	push	r24
    2bfc:	9f 93       	push	r25
    2bfe:	af 93       	push	r26
    2c00:	bf 93       	push	r27
    2c02:	ef 93       	push	r30
    2c04:	ff 93       	push	r31
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
	if(SystemState == SYSTEM_OFF)
    2c0e:	80 91 6e 01 	lds	r24, 0x016E
    2c12:	90 91 6f 01 	lds	r25, 0x016F
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	49 f4       	brne	.+18     	; 0x2c2c <__vector_3+0x48>
	{
		SystemState = SYSTEM_ON;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	90 93 6f 01 	sts	0x016F, r25
    2c22:	80 93 6e 01 	sts	0x016E, r24
		System_Init();
    2c26:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <System_Init>
    2c2a:	06 c0       	rjmp	.+12     	; 0x2c38 <__vector_3+0x54>
	}
	else
	{
		SystemState = SYSTEM_OFF;
    2c2c:	10 92 6f 01 	sts	0x016F, r1
    2c30:	10 92 6e 01 	sts	0x016E, r1
		System_Dis();
    2c34:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <System_Dis>
	}

}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	ff 91       	pop	r31
    2c3e:	ef 91       	pop	r30
    2c40:	bf 91       	pop	r27
    2c42:	af 91       	pop	r26
    2c44:	9f 91       	pop	r25
    2c46:	8f 91       	pop	r24
    2c48:	7f 91       	pop	r23
    2c4a:	6f 91       	pop	r22
    2c4c:	5f 91       	pop	r21
    2c4e:	4f 91       	pop	r20
    2c50:	3f 91       	pop	r19
    2c52:	2f 91       	pop	r18
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	0f 90       	pop	r0
    2c5a:	1f 90       	pop	r1
    2c5c:	18 95       	reti

00002c5e <__vector_10>:

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    2c5e:	1f 92       	push	r1
    2c60:	0f 92       	push	r0
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	0f 92       	push	r0
    2c66:	11 24       	eor	r1, r1
    2c68:	2f 93       	push	r18
    2c6a:	3f 93       	push	r19
    2c6c:	4f 93       	push	r20
    2c6e:	5f 93       	push	r21
    2c70:	6f 93       	push	r22
    2c72:	7f 93       	push	r23
    2c74:	8f 93       	push	r24
    2c76:	9f 93       	push	r25
    2c78:	af 93       	push	r26
    2c7a:	bf 93       	push	r27
    2c7c:	ef 93       	push	r30
    2c7e:	ff 93       	push	r31
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	static u8 Timer0Count = 0;
	static u16 Readings = 0;
	static u16 ReadingCont = 0;
	Timer0Count ++;
    2c88:	80 91 76 01 	lds	r24, 0x0176
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	80 93 76 01 	sts	0x0176, r24
	if(Timer0Count == 10)
    2c92:	80 91 76 01 	lds	r24, 0x0176
    2c96:	8a 30       	cpi	r24, 0x0A	; 10
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <__vector_10+0x3e>
    2c9a:	3e c0       	rjmp	.+124    	; 0x2d18 <__vector_10+0xba>
	{
		ReadingCont++;
    2c9c:	80 91 72 01 	lds	r24, 0x0172
    2ca0:	90 91 73 01 	lds	r25, 0x0173
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	90 93 73 01 	sts	0x0173, r25
    2caa:	80 93 72 01 	sts	0x0172, r24
		Temp = Current_Temp();
    2cae:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Current_Temp>
    2cb2:	90 93 69 01 	sts	0x0169, r25
    2cb6:	80 93 68 01 	sts	0x0168, r24
		Readings += Temp;
    2cba:	20 91 74 01 	lds	r18, 0x0174
    2cbe:	30 91 75 01 	lds	r19, 0x0175
    2cc2:	80 91 68 01 	lds	r24, 0x0168
    2cc6:	90 91 69 01 	lds	r25, 0x0169
    2cca:	82 0f       	add	r24, r18
    2ccc:	93 1f       	adc	r25, r19
    2cce:	90 93 75 01 	sts	0x0175, r25
    2cd2:	80 93 74 01 	sts	0x0174, r24
		if(ReadingCont%Num_Of_Temp_Measures == 0)
    2cd6:	80 91 72 01 	lds	r24, 0x0172
    2cda:	90 91 73 01 	lds	r25, 0x0173
    2cde:	2a e0       	ldi	r18, 0x0A	; 10
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	b9 01       	movw	r22, r18
    2ce4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	b1 f4       	brne	.+44     	; 0x2d18 <__vector_10+0xba>
		{
			AvrgTemp=Readings/Num_Of_Temp_Measures;
    2cec:	80 91 74 01 	lds	r24, 0x0174
    2cf0:	90 91 75 01 	lds	r25, 0x0175
    2cf4:	2a e0       	ldi	r18, 0x0A	; 10
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2cfe:	cb 01       	movw	r24, r22
    2d00:	90 93 7d 01 	sts	0x017D, r25
    2d04:	80 93 7c 01 	sts	0x017C, r24
			Readings = 0;
    2d08:	10 92 75 01 	sts	0x0175, r1
    2d0c:	10 92 74 01 	sts	0x0174, r1
			ReadingCont = 0;
    2d10:	10 92 73 01 	sts	0x0173, r1
    2d14:	10 92 72 01 	sts	0x0172, r1
		}
	}
/**/
}
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	7f 91       	pop	r23
    2d2a:	6f 91       	pop	r22
    2d2c:	5f 91       	pop	r21
    2d2e:	4f 91       	pop	r20
    2d30:	3f 91       	pop	r19
    2d32:	2f 91       	pop	r18
    2d34:	0f 90       	pop	r0
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	0f 90       	pop	r0
    2d3a:	1f 90       	pop	r1
    2d3c:	18 95       	reti

00002d3e <__vector_7>:

void __vector_7(void)     __attribute__((signal));
void __vector_7(void)
{
    2d3e:	1f 92       	push	r1
    2d40:	0f 92       	push	r0
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	0f 92       	push	r0
    2d46:	11 24       	eor	r1, r1
    2d48:	8f 93       	push	r24
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	Flag_1_Sec = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 70 01 	sts	0x0170, r24
	Timer1Count++;
    2d58:	80 91 6b 01 	lds	r24, 0x016B
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	80 93 6b 01 	sts	0x016B, r24
	if(Timer1Count==5)
    2d62:	80 91 6b 01 	lds	r24, 0x016B
    2d66:	85 30       	cpi	r24, 0x05	; 5
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <__vector_7+0x36>
	{
		Flag_5_Sec = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 93 71 01 	sts	0x0171, r24
		Timer1Count=0;
    2d70:	10 92 6b 01 	sts	0x016B, r1
	}
}
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	8f 91       	pop	r24
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <__mulsi3>:
    2d84:	62 9f       	mul	r22, r18
    2d86:	d0 01       	movw	r26, r0
    2d88:	73 9f       	mul	r23, r19
    2d8a:	f0 01       	movw	r30, r0
    2d8c:	82 9f       	mul	r24, r18
    2d8e:	e0 0d       	add	r30, r0
    2d90:	f1 1d       	adc	r31, r1
    2d92:	64 9f       	mul	r22, r20
    2d94:	e0 0d       	add	r30, r0
    2d96:	f1 1d       	adc	r31, r1
    2d98:	92 9f       	mul	r25, r18
    2d9a:	f0 0d       	add	r31, r0
    2d9c:	83 9f       	mul	r24, r19
    2d9e:	f0 0d       	add	r31, r0
    2da0:	74 9f       	mul	r23, r20
    2da2:	f0 0d       	add	r31, r0
    2da4:	65 9f       	mul	r22, r21
    2da6:	f0 0d       	add	r31, r0
    2da8:	99 27       	eor	r25, r25
    2daa:	72 9f       	mul	r23, r18
    2dac:	b0 0d       	add	r27, r0
    2dae:	e1 1d       	adc	r30, r1
    2db0:	f9 1f       	adc	r31, r25
    2db2:	63 9f       	mul	r22, r19
    2db4:	b0 0d       	add	r27, r0
    2db6:	e1 1d       	adc	r30, r1
    2db8:	f9 1f       	adc	r31, r25
    2dba:	bd 01       	movw	r22, r26
    2dbc:	cf 01       	movw	r24, r30
    2dbe:	11 24       	eor	r1, r1
    2dc0:	08 95       	ret

00002dc2 <__udivmodhi4>:
    2dc2:	aa 1b       	sub	r26, r26
    2dc4:	bb 1b       	sub	r27, r27
    2dc6:	51 e1       	ldi	r21, 0x11	; 17
    2dc8:	07 c0       	rjmp	.+14     	; 0x2dd8 <__udivmodhi4_ep>

00002dca <__udivmodhi4_loop>:
    2dca:	aa 1f       	adc	r26, r26
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	a6 17       	cp	r26, r22
    2dd0:	b7 07       	cpc	r27, r23
    2dd2:	10 f0       	brcs	.+4      	; 0x2dd8 <__udivmodhi4_ep>
    2dd4:	a6 1b       	sub	r26, r22
    2dd6:	b7 0b       	sbc	r27, r23

00002dd8 <__udivmodhi4_ep>:
    2dd8:	88 1f       	adc	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	5a 95       	dec	r21
    2dde:	a9 f7       	brne	.-22     	; 0x2dca <__udivmodhi4_loop>
    2de0:	80 95       	com	r24
    2de2:	90 95       	com	r25
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	08 95       	ret

00002dea <__udivmodsi4>:
    2dea:	a1 e2       	ldi	r26, 0x21	; 33
    2dec:	1a 2e       	mov	r1, r26
    2dee:	aa 1b       	sub	r26, r26
    2df0:	bb 1b       	sub	r27, r27
    2df2:	fd 01       	movw	r30, r26
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <__udivmodsi4_ep>

00002df6 <__udivmodsi4_loop>:
    2df6:	aa 1f       	adc	r26, r26
    2df8:	bb 1f       	adc	r27, r27
    2dfa:	ee 1f       	adc	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	a2 17       	cp	r26, r18
    2e00:	b3 07       	cpc	r27, r19
    2e02:	e4 07       	cpc	r30, r20
    2e04:	f5 07       	cpc	r31, r21
    2e06:	20 f0       	brcs	.+8      	; 0x2e10 <__udivmodsi4_ep>
    2e08:	a2 1b       	sub	r26, r18
    2e0a:	b3 0b       	sbc	r27, r19
    2e0c:	e4 0b       	sbc	r30, r20
    2e0e:	f5 0b       	sbc	r31, r21

00002e10 <__udivmodsi4_ep>:
    2e10:	66 1f       	adc	r22, r22
    2e12:	77 1f       	adc	r23, r23
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	1a 94       	dec	r1
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <__udivmodsi4_loop>
    2e1c:	60 95       	com	r22
    2e1e:	70 95       	com	r23
    2e20:	80 95       	com	r24
    2e22:	90 95       	com	r25
    2e24:	9b 01       	movw	r18, r22
    2e26:	ac 01       	movw	r20, r24
    2e28:	bd 01       	movw	r22, r26
    2e2a:	cf 01       	movw	r24, r30
    2e2c:	08 95       	ret

00002e2e <__prologue_saves__>:
    2e2e:	2f 92       	push	r2
    2e30:	3f 92       	push	r3
    2e32:	4f 92       	push	r4
    2e34:	5f 92       	push	r5
    2e36:	6f 92       	push	r6
    2e38:	7f 92       	push	r7
    2e3a:	8f 92       	push	r8
    2e3c:	9f 92       	push	r9
    2e3e:	af 92       	push	r10
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	ca 1b       	sub	r28, r26
    2e58:	db 0b       	sbc	r29, r27
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	09 94       	ijmp

00002e66 <__epilogue_restores__>:
    2e66:	2a 88       	ldd	r2, Y+18	; 0x12
    2e68:	39 88       	ldd	r3, Y+17	; 0x11
    2e6a:	48 88       	ldd	r4, Y+16	; 0x10
    2e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e78:	b9 84       	ldd	r11, Y+9	; 0x09
    2e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e7c:	df 80       	ldd	r13, Y+7	; 0x07
    2e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e80:	fd 80       	ldd	r15, Y+5	; 0x05
    2e82:	0c 81       	ldd	r16, Y+4	; 0x04
    2e84:	1b 81       	ldd	r17, Y+3	; 0x03
    2e86:	aa 81       	ldd	r26, Y+2	; 0x02
    2e88:	b9 81       	ldd	r27, Y+1	; 0x01
    2e8a:	ce 0f       	add	r28, r30
    2e8c:	d1 1d       	adc	r29, r1
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	ed 01       	movw	r28, r26
    2e9a:	08 95       	ret

00002e9c <_exit>:
    2e9c:	f8 94       	cli

00002e9e <__stop_program>:
    2e9e:	ff cf       	rjmp	.-2      	; 0x2e9e <__stop_program>
